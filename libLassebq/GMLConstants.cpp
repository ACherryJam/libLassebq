#include "GMLConstants.h"

#include <iostream>
#include <fstream>
#include <iomanip>

const int* g_ConstNumb = nullptr;
const char*** g_ConstNames = nullptr;
const RValue** g_ConstValues = nullptr;

void DumpCodeConstants(void)
{
	std::ofstream fs("GMLConstants.h", std::ofstream::trunc);
	fs << "#pragma once" << std::endl;
	fs << "/* AUTOGENERATED BY libLassebq */" << std::endl;
	for (int c = 0; c < *g_ConstNumb; c++)
	{
		const char* name = (*g_ConstNames)[c];
		const RValue& value = (*g_ConstValues)[c];
		if (!value.isNumber()) abort();
		fs << "#define " << name << " (" << std::fixed << value.asReal() << ")" << std::endl;
	}
	fs << "/* END OF FILE */" << std::endl;
	fs.close();
}

void DumpLuaConstants(void)
{
	std::ofstream fs("genconst.c", std::ofstream::trunc);
	fs << "void RegisterRConstants(lua_State* _pL)" << std::endl;
	fs << "{" << std::endl;
	for (int c = 0; c < *g_ConstNumb; c++)
	{
		const char* name = (*g_ConstNames)[c];
		if (strcmp(name, "true") == 0 || strcmp(name, "false") == 0 || strcmp(name, "self") == 0)
			continue;
		const RValue& value = (*g_ConstValues)[c];
		if (!value.isNumber()) abort();
		fs << "    lua_pushnumber(_pL, " << std::fixed << value.asReal() << ");" << std::endl;
		fs << "    lua_setglobal(_pL, \"" << name << "\");" << std::endl;
	}
	fs << "}" << std::endl;
	fs << std::endl;
	fs.close();
}