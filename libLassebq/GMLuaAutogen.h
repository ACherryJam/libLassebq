#pragma once
#include "GMLua.h"

lua_CFunction lua_get_RLFunc_by_id(const int id);
int lua_camera_create(lua_State *_pL); // takes 0 arguments
int lua_camera_create_view(lua_State *_pL); // takes 4 arguments
int lua_camera_destroy(lua_State *_pL); // takes 1 arguments
int lua_camera_apply(lua_State *_pL); // takes 1 arguments
int lua_camera_get_active(lua_State *_pL); // takes 0 arguments
int lua_camera_get_default(lua_State *_pL); // takes 0 arguments
int lua_camera_set_default(lua_State *_pL); // takes 1 arguments
int lua_camera_set_view_mat(lua_State *_pL); // takes 2 arguments
int lua_camera_set_proj_mat(lua_State *_pL); // takes 2 arguments
int lua_camera_set_update_script(lua_State *_pL); // takes 2 arguments
int lua_camera_set_begin_script(lua_State *_pL); // takes 2 arguments
int lua_camera_set_end_script(lua_State *_pL); // takes 2 arguments
int lua_camera_set_view_pos(lua_State *_pL); // takes 3 arguments
int lua_camera_set_view_size(lua_State *_pL); // takes 3 arguments
int lua_camera_set_view_speed(lua_State *_pL); // takes 3 arguments
int lua_camera_set_view_border(lua_State *_pL); // takes 3 arguments
int lua_camera_set_view_angle(lua_State *_pL); // takes 2 arguments
int lua_camera_set_view_target(lua_State *_pL); // takes 2 arguments
int lua_camera_get_view_mat(lua_State *_pL); // takes 1 arguments
int lua_camera_get_proj_mat(lua_State *_pL); // takes 1 arguments
int lua_camera_get_update_script(lua_State *_pL); // takes 1 arguments
int lua_camera_get_begin_script(lua_State *_pL); // takes 1 arguments
int lua_camera_get_end_script(lua_State *_pL); // takes 1 arguments
int lua_camera_get_view_x(lua_State *_pL); // takes 1 arguments
int lua_camera_get_view_y(lua_State *_pL); // takes 1 arguments
int lua_camera_get_view_width(lua_State *_pL); // takes 1 arguments
int lua_camera_get_view_height(lua_State *_pL); // takes 1 arguments
int lua_camera_get_view_speed_x(lua_State *_pL); // takes 1 arguments
int lua_camera_get_view_speed_y(lua_State *_pL); // takes 1 arguments
int lua_camera_get_view_border_x(lua_State *_pL); // takes 1 arguments
int lua_camera_get_view_border_y(lua_State *_pL); // takes 1 arguments
int lua_camera_get_view_angle(lua_State *_pL); // takes 1 arguments
int lua_camera_get_view_target(lua_State *_pL); // takes 1 arguments
int lua_view_get_camera(lua_State *_pL); // takes 1 arguments
int lua_view_get_visible(lua_State *_pL); // takes 1 arguments
int lua_view_get_xport(lua_State *_pL); // takes 1 arguments
int lua_view_get_yport(lua_State *_pL); // takes 1 arguments
int lua_view_get_wport(lua_State *_pL); // takes 1 arguments
int lua_view_get_hport(lua_State *_pL); // takes 1 arguments
int lua_view_get_surface_id(lua_State *_pL); // takes 1 arguments
int lua_view_set_camera(lua_State *_pL); // takes 2 arguments
int lua_view_set_visible(lua_State *_pL); // takes 2 arguments
int lua_view_set_xport(lua_State *_pL); // takes 2 arguments
int lua_view_set_yport(lua_State *_pL); // takes 2 arguments
int lua_view_set_wport(lua_State *_pL); // takes 2 arguments
int lua_view_set_hport(lua_State *_pL); // takes 2 arguments
int lua_view_set_surface_id(lua_State *_pL); // takes 2 arguments
int lua_move_random(lua_State *_pL); // takes 2 arguments
int lua_place_free(lua_State *_pL); // takes 2 arguments
int lua_place_empty(lua_State *_pL); // takes 2 arguments
int lua_place_meeting(lua_State *_pL); // takes 3 arguments
int lua_place_snapped(lua_State *_pL); // takes 2 arguments
int lua_move_snap(lua_State *_pL); // takes 2 arguments
int lua_move_towards_point(lua_State *_pL); // takes 3 arguments
int lua_move_contact(lua_State *_pL); // takes 1 arguments
int lua_move_contact_solid(lua_State *_pL); // takes 2 arguments
int lua_move_contact_all(lua_State *_pL); // takes 2 arguments
int lua_move_outside_solid(lua_State *_pL); // takes 2 arguments
int lua_move_outside_all(lua_State *_pL); // takes 2 arguments
int lua_move_bounce(lua_State *_pL); // takes 1 arguments
int lua_move_bounce_solid(lua_State *_pL); // takes 1 arguments
int lua_move_bounce_all(lua_State *_pL); // takes 1 arguments
int lua_move_wrap(lua_State *_pL); // takes 3 arguments
int lua_motion_set(lua_State *_pL); // takes 2 arguments
int lua_motion_add(lua_State *_pL); // takes 2 arguments
int lua_distance_to_point(lua_State *_pL); // takes 2 arguments
int lua_distance_to_object(lua_State *_pL); // takes 1 arguments
int lua_path_start(lua_State *_pL); // takes 4 arguments
int lua_path_end(lua_State *_pL); // takes 0 arguments
int lua_mp_linear_step(lua_State *_pL); // takes 4 arguments
int lua_mp_linear_path(lua_State *_pL); // takes 5 arguments
int lua_mp_linear_step_object(lua_State *_pL); // takes 4 arguments
int lua_mp_linear_path_object(lua_State *_pL); // takes 5 arguments
int lua_mp_potential_settings(lua_State *_pL); // takes 4 arguments
int lua_mp_potential_step(lua_State *_pL); // takes 4 arguments
int lua_mp_potential_path(lua_State *_pL); // takes 6 arguments
int lua_mp_potential_step_object(lua_State *_pL); // takes 4 arguments
int lua_mp_potential_path_object(lua_State *_pL); // takes 6 arguments
int lua_mp_grid_create(lua_State *_pL); // takes 6 arguments
int lua_mp_grid_destroy(lua_State *_pL); // takes 1 arguments
int lua_mp_grid_clear_all(lua_State *_pL); // takes 1 arguments
int lua_mp_grid_clear_cell(lua_State *_pL); // takes 3 arguments
int lua_mp_grid_clear_rectangle(lua_State *_pL); // takes 5 arguments
int lua_mp_grid_add_cell(lua_State *_pL); // takes 3 arguments
int lua_mp_grid_get_cell(lua_State *_pL); // takes 3 arguments
int lua_mp_grid_add_rectangle(lua_State *_pL); // takes 5 arguments
int lua_mp_grid_add_instances(lua_State *_pL); // takes 3 arguments
int lua_mp_grid_path(lua_State *_pL); // takes 7 arguments
int lua_mp_grid_draw(lua_State *_pL); // takes 1 arguments
int lua_mp_grid_to_ds_grid(lua_State *_pL); // takes 1 arguments
int lua_collision_point(lua_State *_pL); // takes 5 arguments
int lua_collision_point_list(lua_State *_pL); // takes 7 arguments
int lua_collision_rectangle(lua_State *_pL); // takes 7 arguments
int lua_collision_rectangle_list(lua_State *_pL); // takes 9 arguments
int lua_collision_circle(lua_State *_pL); // takes 6 arguments
int lua_collision_circle_list(lua_State *_pL); // takes 8 arguments
int lua_collision_ellipse(lua_State *_pL); // takes 7 arguments
int lua_collision_ellipse_list(lua_State *_pL); // takes 9 arguments
int lua_collision_line(lua_State *_pL); // takes 7 arguments
int lua_collision_line_list(lua_State *_pL); // takes 9 arguments
int lua_instance_find(lua_State *_pL); // takes 2 arguments
int lua_instance_exists(lua_State *_pL); // takes 1 arguments
int lua_instance_number(lua_State *_pL); // takes 1 arguments
int lua_instance_position(lua_State *_pL); // takes 3 arguments
int lua_instance_position_list(lua_State *_pL); // takes 4 arguments
int lua_instance_nearest(lua_State *_pL); // takes 3 arguments
int lua_instance_furthest(lua_State *_pL); // takes 3 arguments
int lua_instance_place(lua_State *_pL); // takes 3 arguments
int lua_instance_place_list(lua_State *_pL); // takes 5 arguments
int lua_instance_create_depth(lua_State *_pL); // takes 4 arguments
int lua_instance_create_layer(lua_State *_pL); // takes 4 arguments
int lua_instance_copy(lua_State *_pL); // takes 1 arguments
int lua_instance_change(lua_State *_pL); // takes 2 arguments
int lua_instance_destroy(lua_State *_pL); // takes -1 arguments
int lua_instance_sprite(lua_State *_pL); // takes 1 arguments
int lua_position_empty(lua_State *_pL); // takes 2 arguments
int lua_position_meeting(lua_State *_pL); // takes 3 arguments
int lua_position_destroy(lua_State *_pL); // takes 2 arguments
int lua_position_change(lua_State *_pL); // takes 4 arguments
int lua_instance_id_get(lua_State *_pL); // takes 1 arguments
int lua_instance_deactivate_all(lua_State *_pL); // takes 1 arguments
int lua_instance_deactivate_object(lua_State *_pL); // takes 1 arguments
int lua_instance_deactivate_region(lua_State *_pL); // takes 6 arguments
int lua_instance_activate_all(lua_State *_pL); // takes 0 arguments
int lua_instance_activate_object(lua_State *_pL); // takes 1 arguments
int lua_instance_activate_region(lua_State *_pL); // takes 5 arguments
int lua_instance_deactivate_region_special(lua_State *_pL); // takes 5 arguments
int lua_room_goto(lua_State *_pL); // takes 1 arguments
int lua_room_goto_previous(lua_State *_pL); // takes 0 arguments
int lua_room_goto_next(lua_State *_pL); // takes 0 arguments
int lua_room_previous(lua_State *_pL); // takes 1 arguments
int lua_room_next(lua_State *_pL); // takes 1 arguments
int lua_room_restart(lua_State *_pL); // takes 0 arguments
int lua_game_end(lua_State *_pL); // takes 0 arguments
int lua_game_restart(lua_State *_pL); // takes 0 arguments
int lua_game_load(lua_State *_pL); // takes 1 arguments
int lua_game_save(lua_State *_pL); // takes 1 arguments
int lua_game_save_buffer(lua_State *_pL); // takes 1 arguments
int lua_game_load_buffer(lua_State *_pL); // takes 1 arguments
int lua_transition_define(lua_State *_pL); // takes 2 arguments
int lua_transition_exists(lua_State *_pL); // takes 1 arguments
int lua_sleep(lua_State *_pL); // takes 1 arguments
int lua_point_in_rectangle(lua_State *_pL); // takes 6 arguments
int lua_point_in_triangle(lua_State *_pL); // takes 8 arguments
int lua_point_in_circle(lua_State *_pL); // takes 5 arguments
int lua_rectangle_in_rectangle(lua_State *_pL); // takes 8 arguments
int lua_rectangle_in_triangle(lua_State *_pL); // takes 10 arguments
int lua_rectangle_in_circle(lua_State *_pL); // takes 7 arguments
int lua_is_bool(lua_State *_pL); // takes 1 arguments
int lua_is_real(lua_State *_pL); // takes 1 arguments
int lua_is_string(lua_State *_pL); // takes 1 arguments
int lua_is_array(lua_State *_pL); // takes 1 arguments
int lua_is_undefined(lua_State *_pL); // takes 1 arguments
int lua_is_int32(lua_State *_pL); // takes 1 arguments
int lua_is_int64(lua_State *_pL); // takes 1 arguments
int lua_is_ptr(lua_State *_pL); // takes 1 arguments
int lua_is_vec3(lua_State *_pL); // takes 1 arguments
int lua_is_vec4(lua_State *_pL); // takes 1 arguments
int lua_is_matrix(lua_State *_pL); // takes 1 arguments
int lua_typeof(lua_State *_pL); // takes 1 arguments
int lua_array_length_1d(lua_State *_pL); // takes 1 arguments
int lua_array_length_2d(lua_State *_pL); // takes 2 arguments
int lua_array_height_2d(lua_State *_pL); // takes 1 arguments
int lua_array_get(lua_State *_pL); // takes 2 arguments
int lua_array_set(lua_State *_pL); // takes 3 arguments
int lua_array_set_pre(lua_State *_pL); // takes 3 arguments
int lua_array_set_post(lua_State *_pL); // takes 3 arguments
int lua_array_get_2D(lua_State *_pL); // takes 2 arguments
int lua_array_set_2D(lua_State *_pL); // takes 3 arguments
int lua_array_set_2D_pre(lua_State *_pL); // takes 3 arguments
int lua_array_set_2D_post(lua_State *_pL); // takes 3 arguments
int lua_array_equals(lua_State *_pL); // takes 2 arguments
int lua_array_create(lua_State *_pL); // takes -1 arguments
int lua_array_copy(lua_State *_pL); // takes 5 arguments
int lua_random(lua_State *_pL); // takes 1 arguments
int lua_random_range(lua_State *_pL); // takes 2 arguments
int lua_irandom(lua_State *_pL); // takes 1 arguments
int lua_irandom_range(lua_State *_pL); // takes 2 arguments
int lua_random_use_old_version(lua_State *_pL); // takes 1 arguments
int lua_random_set_seed(lua_State *_pL); // takes 1 arguments
int lua_random_get_seed(lua_State *_pL); // takes 0 arguments
int lua_randomize(lua_State *_pL); // takes 0 arguments
int lua_randomise(lua_State *_pL); // takes 0 arguments
int lua_abs(lua_State *_pL); // takes 1 arguments
int lua_round(lua_State *_pL); // takes 1 arguments
int lua_floor(lua_State *_pL); // takes 1 arguments
int lua_ceil(lua_State *_pL); // takes 1 arguments
int lua_sign(lua_State *_pL); // takes 1 arguments
int lua_frac(lua_State *_pL); // takes 1 arguments
int lua_sqrt(lua_State *_pL); // takes 1 arguments
int lua_sqr(lua_State *_pL); // takes 1 arguments
int lua_exp(lua_State *_pL); // takes 1 arguments
int lua_ln(lua_State *_pL); // takes 1 arguments
int lua_log2(lua_State *_pL); // takes 1 arguments
int lua_log10(lua_State *_pL); // takes 1 arguments
int lua_sin(lua_State *_pL); // takes 1 arguments
int lua_cos(lua_State *_pL); // takes 1 arguments
int lua_tan(lua_State *_pL); // takes 1 arguments
int lua_arcsin(lua_State *_pL); // takes 1 arguments
int lua_arccos(lua_State *_pL); // takes 1 arguments
int lua_arctan(lua_State *_pL); // takes 1 arguments
int lua_arctan2(lua_State *_pL); // takes 2 arguments
int lua_dsin(lua_State *_pL); // takes 1 arguments
int lua_dcos(lua_State *_pL); // takes 1 arguments
int lua_dtan(lua_State *_pL); // takes 1 arguments
int lua_darcsin(lua_State *_pL); // takes 1 arguments
int lua_darccos(lua_State *_pL); // takes 1 arguments
int lua_darctan(lua_State *_pL); // takes 1 arguments
int lua_darctan2(lua_State *_pL); // takes 2 arguments
int lua_degtorad(lua_State *_pL); // takes 1 arguments
int lua_radtodeg(lua_State *_pL); // takes 1 arguments
int lua_power(lua_State *_pL); // takes 2 arguments
int lua_logn(lua_State *_pL); // takes 2 arguments
int lua_min(lua_State *_pL); // takes -1 arguments
int lua_max(lua_State *_pL); // takes -1 arguments
int lua_min3(lua_State *_pL); // takes 3 arguments
int lua_max3(lua_State *_pL); // takes 3 arguments
int lua_mean(lua_State *_pL); // takes -1 arguments
int lua_median(lua_State *_pL); // takes -1 arguments
int lua_choose(lua_State *_pL); // takes -1 arguments
int lua_clamp(lua_State *_pL); // takes 3 arguments
int lua_lerp(lua_State *_pL); // takes 3 arguments
int lua_real(lua_State *_pL); // takes 1 arguments
int lua_bool(lua_State *_pL); // takes 1 arguments
int lua_string(lua_State *_pL); // takes 1 arguments
int lua_int64(lua_State *_pL); // takes 1 arguments
int lua_ptr(lua_State *_pL); // takes 1 arguments
int lua_string_format(lua_State *_pL); // takes 3 arguments
int lua_chr(lua_State *_pL); // takes 1 arguments
int lua_ansi_char(lua_State *_pL); // takes 1 arguments
int lua_ord(lua_State *_pL); // takes 1 arguments
int lua_string_length(lua_State *_pL); // takes 1 arguments
int lua_string_pos(lua_State *_pL); // takes 2 arguments
int lua_string_copy(lua_State *_pL); // takes 3 arguments
int lua_string_char_at(lua_State *_pL); // takes 2 arguments
int lua_string_ord_at(lua_State *_pL); // takes 2 arguments
int lua_string_byte_length(lua_State *_pL); // takes 1 arguments
int lua_string_byte_at(lua_State *_pL); // takes 2 arguments
int lua_string_set_byte_at(lua_State *_pL); // takes 3 arguments
int lua_string_delete(lua_State *_pL); // takes 3 arguments
int lua_string_insert(lua_State *_pL); // takes 3 arguments
int lua_string_lower(lua_State *_pL); // takes 1 arguments
int lua_string_upper(lua_State *_pL); // takes 1 arguments
int lua_string_repeat(lua_State *_pL); // takes 2 arguments
int lua_string_letters(lua_State *_pL); // takes 1 arguments
int lua_string_digits(lua_State *_pL); // takes 1 arguments
int lua_string_lettersdigits(lua_State *_pL); // takes 1 arguments
int lua_string_replace(lua_State *_pL); // takes 3 arguments
int lua_string_replace_all(lua_State *_pL); // takes 3 arguments
int lua_string_count(lua_State *_pL); // takes 2 arguments
int lua_string_hash_to_newline(lua_State *_pL); // takes 1 arguments
int lua_point_distance(lua_State *_pL); // takes 4 arguments
int lua_point_direction(lua_State *_pL); // takes 4 arguments
int lua_lengthdir_x(lua_State *_pL); // takes 2 arguments
int lua_lengthdir_y(lua_State *_pL); // takes 2 arguments
int lua_point_distance_3d(lua_State *_pL); // takes 6 arguments
int lua_dot_product(lua_State *_pL); // takes 4 arguments
int lua_dot_product_normalised(lua_State *_pL); // takes 4 arguments
int lua_dot_product_normalized(lua_State *_pL); // takes 4 arguments
int lua_dot_product_3d(lua_State *_pL); // takes 6 arguments
int lua_dot_product_3d_normalised(lua_State *_pL); // takes 6 arguments
int lua_dot_product_3d_normalized(lua_State *_pL); // takes 6 arguments
int lua_math_set_epsilon(lua_State *_pL); // takes 1 arguments
int lua_math_get_epsilon(lua_State *_pL); // takes 0 arguments
int lua_angle_difference(lua_State *_pL); // takes 1 arguments
int lua_display_get_width(lua_State *_pL); // takes 0 arguments
int lua_display_get_height(lua_State *_pL); // takes 0 arguments
int lua_display_get_colordepth(lua_State *_pL); // takes 0 arguments
int lua_display_get_frequency(lua_State *_pL); // takes 0 arguments
int lua_display_get_orientation(lua_State *_pL); // takes 0 arguments
int lua_display_set_size(lua_State *_pL); // takes 2 arguments
int lua_display_set_colordepth(lua_State *_pL); // takes 1 arguments
int lua_display_set_frequency(lua_State *_pL); // takes 1 arguments
int lua_display_set_all(lua_State *_pL); // takes 4 arguments
int lua_display_test_all(lua_State *_pL); // takes 4 arguments
int lua_display_reset(lua_State *_pL); // takes 1 arguments
int lua_display_mouse_get_x(lua_State *_pL); // takes 0 arguments
int lua_display_mouse_get_y(lua_State *_pL); // takes 0 arguments
int lua_display_mouse_set(lua_State *_pL); // takes 2 arguments
int lua_draw_enable_drawevent(lua_State *_pL); // takes 1 arguments
int lua_display_get_windows_vertex_buffer_method(lua_State *_pL); // takes 0 arguments
int lua_display_get_windows_alternate_sync(lua_State *_pL); // takes 0 arguments
int lua_display_set_windows_vertex_buffer_method(lua_State *_pL); // takes 1 arguments
int lua_display_set_windows_alternate_sync(lua_State *_pL); // takes 1 arguments
int lua_display_set_ui_visibility(lua_State *_pL); // takes 1 arguments
int lua_display_set_timing_method(lua_State *_pL); // takes 1 arguments
int lua_display_get_timing_method(lua_State *_pL); // takes 0 arguments
int lua_display_set_sleep_margin(lua_State *_pL); // takes 1 arguments
int lua_display_get_sleep_margin(lua_State *_pL); // takes 0 arguments
int lua_window_set_visible(lua_State *_pL); // takes 1 arguments
int lua_window_get_visible(lua_State *_pL); // takes 0 arguments
int lua_window_set_fullscreen(lua_State *_pL); // takes 1 arguments
int lua_window_get_fullscreen(lua_State *_pL); // takes 0 arguments
int lua_window_set_showborder(lua_State *_pL); // takes 1 arguments
int lua_window_get_showborder(lua_State *_pL); // takes 0 arguments
int lua_window_set_showicons(lua_State *_pL); // takes 1 arguments
int lua_window_get_showicons(lua_State *_pL); // takes 0 arguments
int lua_window_set_stayontop(lua_State *_pL); // takes 1 arguments
int lua_window_get_stayontop(lua_State *_pL); // takes 0 arguments
int lua_window_set_sizeable(lua_State *_pL); // takes 1 arguments
int lua_window_get_sizeable(lua_State *_pL); // takes 0 arguments
int lua_window_set_caption(lua_State *_pL); // takes 1 arguments
int lua_window_get_caption(lua_State *_pL); // takes 0 arguments
int lua_window_set_cursor(lua_State *_pL); // takes 1 arguments
int lua_window_get_cursor(lua_State *_pL); // takes 0 arguments
int lua_window_set_color(lua_State *_pL); // takes 1 arguments
int lua_window_set_colour(lua_State *_pL); // takes 1 arguments
int lua_window_get_color(lua_State *_pL); // takes 0 arguments
int lua_window_get_colour(lua_State *_pL); // takes 0 arguments
int lua_window_set_min_width(lua_State *_pL); // takes 1 arguments
int lua_window_set_max_width(lua_State *_pL); // takes 1 arguments
int lua_window_set_min_height(lua_State *_pL); // takes 1 arguments
int lua_window_set_max_height(lua_State *_pL); // takes 1 arguments
int lua_window_set_position(lua_State *_pL); // takes 2 arguments
int lua_window_set_size(lua_State *_pL); // takes 2 arguments
int lua_window_set_rectangle(lua_State *_pL); // takes 4 arguments
int lua_window_center(lua_State *_pL); // takes 0 arguments
int lua_window_default(lua_State *_pL); // takes 0 arguments
int lua_window_get_x(lua_State *_pL); // takes 0 arguments
int lua_window_get_y(lua_State *_pL); // takes 0 arguments
int lua_window_get_width(lua_State *_pL); // takes 0 arguments
int lua_window_get_height(lua_State *_pL); // takes 0 arguments
int lua_window_get_visible_rects(lua_State *_pL); // takes 4 arguments
int lua_window_mouse_get_x(lua_State *_pL); // takes 0 arguments
int lua_window_mouse_get_y(lua_State *_pL); // takes 0 arguments
int lua_window_mouse_set(lua_State *_pL); // takes 2 arguments
int lua_window_view_mouse_get_x(lua_State *_pL); // takes 1 arguments
int lua_window_view_mouse_get_y(lua_State *_pL); // takes 1 arguments
int lua_window_view_mouse_set(lua_State *_pL); // takes 3 arguments
int lua_window_views_mouse_get_x(lua_State *_pL); // takes 0 arguments
int lua_window_views_mouse_get_y(lua_State *_pL); // takes 0 arguments
int lua_window_views_mouse_set(lua_State *_pL); // takes 2 arguments
int lua_screen_save(lua_State *_pL); // takes 1 arguments
int lua_screen_save_part(lua_State *_pL); // takes 5 arguments
int lua_draw_getpixel(lua_State *_pL); // takes 2 arguments
int lua_draw_getpixel_ext(lua_State *_pL); // takes 2 arguments
int lua_draw_set_color(lua_State *_pL); // takes 1 arguments
int lua_draw_set_colour(lua_State *_pL); // takes 1 arguments
int lua_draw_set_alpha(lua_State *_pL); // takes 1 arguments
int lua_draw_get_color(lua_State *_pL); // takes 0 arguments
int lua_draw_get_colour(lua_State *_pL); // takes 0 arguments
int lua_draw_get_alpha(lua_State *_pL); // takes 0 arguments
int lua_make_color(lua_State *_pL); // takes 3 arguments
int lua_make_colour(lua_State *_pL); // takes 3 arguments
int lua_make_color_rgb(lua_State *_pL); // takes 3 arguments
int lua_make_colour_rgb(lua_State *_pL); // takes 3 arguments
int lua_make_color_hsv(lua_State *_pL); // takes 3 arguments
int lua_make_colour_hsv(lua_State *_pL); // takes 3 arguments
int lua_color_get_red(lua_State *_pL); // takes 1 arguments
int lua_colour_get_red(lua_State *_pL); // takes 1 arguments
int lua_color_get_green(lua_State *_pL); // takes 1 arguments
int lua_colour_get_green(lua_State *_pL); // takes 1 arguments
int lua_color_get_blue(lua_State *_pL); // takes 1 arguments
int lua_colour_get_blue(lua_State *_pL); // takes 1 arguments
int lua_color_get_hue(lua_State *_pL); // takes 1 arguments
int lua_colour_get_hue(lua_State *_pL); // takes 1 arguments
int lua_color_get_saturation(lua_State *_pL); // takes 1 arguments
int lua_colour_get_saturation(lua_State *_pL); // takes 1 arguments
int lua_color_get_value(lua_State *_pL); // takes 1 arguments
int lua_colour_get_value(lua_State *_pL); // takes 1 arguments
int lua_merge_color(lua_State *_pL); // takes 3 arguments
int lua_merge_colour(lua_State *_pL); // takes 3 arguments
int lua_draw_set_blend_mode(lua_State *_pL); // takes 1 arguments
int lua_draw_set_blend_mode_ext(lua_State *_pL); // takes 2 arguments
int lua_draw_set_color_write_enable(lua_State *_pL); // takes 4 arguments
int lua_draw_set_colour_write_enable(lua_State *_pL); // takes 4 arguments
int lua_draw_set_alpha_test(lua_State *_pL); // takes 1 arguments
int lua_draw_set_alpha_test_ref_value(lua_State *_pL); // takes 1 arguments
int lua_draw_get_alpha_test(lua_State *_pL); // takes 0 arguments
int lua_draw_get_alpha_test_ref_value(lua_State *_pL); // takes 0 arguments
int lua_draw_clear(lua_State *_pL); // takes 1 arguments
int lua_draw_clear_alpha(lua_State *_pL); // takes 2 arguments
int lua_draw_point(lua_State *_pL); // takes 2 arguments
int lua_draw_line(lua_State *_pL); // takes 4 arguments
int lua_draw_line_width(lua_State *_pL); // takes 5 arguments
int lua_draw_rectangle(lua_State *_pL); // takes 5 arguments
int lua_draw_roundrect(lua_State *_pL); // takes 5 arguments
int lua_draw_roundrect_ext(lua_State *_pL); // takes 5 arguments
int lua_draw_triangle(lua_State *_pL); // takes 7 arguments
int lua_draw_circle(lua_State *_pL); // takes 4 arguments
int lua_draw_ellipse(lua_State *_pL); // takes 5 arguments
int lua_draw_arrow(lua_State *_pL); // takes 5 arguments
int lua_draw_button(lua_State *_pL); // takes 5 arguments
int lua_draw_healthbar(lua_State *_pL); // takes 11 arguments
int lua_draw_path(lua_State *_pL); // takes 4 arguments
int lua_draw_point_color(lua_State *_pL); // takes 3 arguments
int lua_draw_point_colour(lua_State *_pL); // takes 3 arguments
int lua_draw_line_color(lua_State *_pL); // takes 6 arguments
int lua_draw_line_colour(lua_State *_pL); // takes 6 arguments
int lua_draw_line_width_color(lua_State *_pL); // takes 7 arguments
int lua_draw_line_width_colour(lua_State *_pL); // takes 7 arguments
int lua_draw_rectangle_color(lua_State *_pL); // takes 9 arguments
int lua_draw_rectangle_colour(lua_State *_pL); // takes 9 arguments
int lua_draw_roundrect_color(lua_State *_pL); // takes 7 arguments
int lua_draw_roundrect_colour(lua_State *_pL); // takes 7 arguments
int lua_draw_roundrect_color_ext(lua_State *_pL); // takes 7 arguments
int lua_draw_roundrect_colour_ext(lua_State *_pL); // takes 7 arguments
int lua_draw_triangle_color(lua_State *_pL); // takes 10 arguments
int lua_draw_triangle_colour(lua_State *_pL); // takes 10 arguments
int lua_draw_circle_color(lua_State *_pL); // takes 6 arguments
int lua_draw_circle_colour(lua_State *_pL); // takes 6 arguments
int lua_draw_ellipse_color(lua_State *_pL); // takes 7 arguments
int lua_draw_ellipse_colour(lua_State *_pL); // takes 7 arguments
int lua_draw_get_circle_precision(lua_State *_pL); // takes 0 arguments
int lua_draw_set_circle_precision(lua_State *_pL); // takes 1 arguments
int lua_draw_primitive_begin(lua_State *_pL); // takes 1 arguments
int lua_draw_primitive_begin_texture(lua_State *_pL); // takes 2 arguments
int lua_draw_primitive_end(lua_State *_pL); // takes 0 arguments
int lua_draw_vertex(lua_State *_pL); // takes 2 arguments
int lua_draw_vertex_color(lua_State *_pL); // takes 4 arguments
int lua_draw_vertex_colour(lua_State *_pL); // takes 4 arguments
int lua_draw_vertex_texture(lua_State *_pL); // takes 4 arguments
int lua_draw_vertex_texture_color(lua_State *_pL); // takes 6 arguments
int lua_draw_vertex_texture_colour(lua_State *_pL); // takes 6 arguments
int lua_sprite_get_uvs(lua_State *_pL); // takes 2 arguments
int lua_background_get_uvs(lua_State *_pL); // takes 2 arguments
int lua_font_get_uvs(lua_State *_pL); // takes 2 arguments
int lua_sprite_get_texture(lua_State *_pL); // takes 2 arguments
int lua_background_get_texture(lua_State *_pL); // takes 1 arguments
int lua_font_get_texture(lua_State *_pL); // takes 1 arguments
int lua_texture_exists(lua_State *_pL); // takes 1 arguments
int lua_texture_set_interpolation(lua_State *_pL); // takes 1 arguments
int lua_texture_set_interpolation_ext(lua_State *_pL); // takes 2 arguments
int lua_texture_set_blending(lua_State *_pL); // takes 1 arguments
int lua_texture_set_repeat(lua_State *_pL); // takes 1 arguments
int lua_texture_set_repeat_ext(lua_State *_pL); // takes 2 arguments
int lua_texture_get_width(lua_State *_pL); // takes 1 arguments
int lua_texture_get_height(lua_State *_pL); // takes 1 arguments
int lua_texture_preload(lua_State *_pL); // takes 1 arguments
int lua_texture_set_priority(lua_State *_pL); // takes 2 arguments
int lua_texture_global_scale(lua_State *_pL); // takes 1 arguments
int lua_texture_get_uvs(lua_State *_pL); // takes 1 arguments
int lua_draw_get_font(lua_State *_pL); // takes 0 arguments
int lua_draw_set_font(lua_State *_pL); // takes 1 arguments
int lua_draw_get_halign(lua_State *_pL); // takes 0 arguments
int lua_draw_set_halign(lua_State *_pL); // takes 1 arguments
int lua_draw_get_valign(lua_State *_pL); // takes 0 arguments
int lua_draw_set_valign(lua_State *_pL); // takes 1 arguments
int lua_string_width(lua_State *_pL); // takes 1 arguments
int lua_string_height(lua_State *_pL); // takes 1 arguments
int lua_string_width_ext(lua_State *_pL); // takes 3 arguments
int lua_string_height_ext(lua_State *_pL); // takes 3 arguments
int lua_draw_text(lua_State *_pL); // takes 3 arguments
int lua_draw_text_ext(lua_State *_pL); // takes 5 arguments
int lua_draw_text_transformed(lua_State *_pL); // takes 6 arguments
int lua_draw_text_ext_transformed(lua_State *_pL); // takes 8 arguments
int lua_draw_text_color(lua_State *_pL); // takes 8 arguments
int lua_draw_text_colour(lua_State *_pL); // takes 8 arguments
int lua_draw_text_transformed_color(lua_State *_pL); // takes 11 arguments
int lua_draw_text_transformed_colour(lua_State *_pL); // takes 11 arguments
int lua_draw_text_ext_color(lua_State *_pL); // takes 10 arguments
int lua_draw_text_ext_colour(lua_State *_pL); // takes 10 arguments
int lua_draw_text_ext_transformed_color(lua_State *_pL); // takes 13 arguments
int lua_draw_text_ext_transformed_colour(lua_State *_pL); // takes 13 arguments
int lua_collision_shape(lua_State *_pL); // takes 9 arguments
int lua_draw_self(lua_State *_pL); // takes 0 arguments
int lua_draw_sprite(lua_State *_pL); // takes 4 arguments
int lua_draw_shape(lua_State *_pL); // takes 11 arguments
int lua_draw_shape_string(lua_State *_pL); // takes 10 arguments
int lua_draw_sprite_ext(lua_State *_pL); // takes 9 arguments
int lua_draw_sprite_pos(lua_State *_pL); // takes 11 arguments
int lua_draw_sprite_stretched(lua_State *_pL); // takes 6 arguments
int lua_draw_sprite_stretched_ext(lua_State *_pL); // takes 8 arguments
int lua_draw_sprite_part(lua_State *_pL); // takes 8 arguments
int lua_draw_sprite_part_ext(lua_State *_pL); // takes 12 arguments
int lua_draw_sprite_general(lua_State *_pL); // takes 16 arguments
int lua_draw_sprite_tiled(lua_State *_pL); // takes 4 arguments
int lua_draw_sprite_tiled_ext(lua_State *_pL); // takes 8 arguments
int lua_draw_background(lua_State *_pL); // takes 3 arguments
int lua_draw_background_ext(lua_State *_pL); // takes 8 arguments
int lua_draw_background_stretched(lua_State *_pL); // takes 5 arguments
int lua_draw_background_stretched_ext(lua_State *_pL); // takes 7 arguments
int lua_draw_background_part(lua_State *_pL); // takes 7 arguments
int lua_draw_background_part_ext(lua_State *_pL); // takes 11 arguments
int lua_draw_background_general(lua_State *_pL); // takes 15 arguments
int lua_draw_background_tiled(lua_State *_pL); // takes 3 arguments
int lua_draw_background_tiled_ext(lua_State *_pL); // takes 7 arguments
int lua_shader_enable_corner_id(lua_State *_pL); // takes 1 arguments
int lua_tile_get_x(lua_State *_pL); // takes 1 arguments
int lua_tile_get_y(lua_State *_pL); // takes 1 arguments
int lua_tile_get_left(lua_State *_pL); // takes 1 arguments
int lua_tile_get_top(lua_State *_pL); // takes 1 arguments
int lua_tile_get_width(lua_State *_pL); // takes 1 arguments
int lua_tile_get_height(lua_State *_pL); // takes 1 arguments
int lua_tile_get_depth(lua_State *_pL); // takes 1 arguments
int lua_tile_get_visible(lua_State *_pL); // takes 1 arguments
int lua_tile_get_xscale(lua_State *_pL); // takes 1 arguments
int lua_tile_get_yscale(lua_State *_pL); // takes 1 arguments
int lua_tile_get_blend(lua_State *_pL); // takes 1 arguments
int lua_tile_get_alpha(lua_State *_pL); // takes 1 arguments
int lua_tile_get_background(lua_State *_pL); // takes 1 arguments
int lua_tile_set_visible(lua_State *_pL); // takes 2 arguments
int lua_tile_set_background(lua_State *_pL); // takes 2 arguments
int lua_tile_set_region(lua_State *_pL); // takes 5 arguments
int lua_tile_set_position(lua_State *_pL); // takes 3 arguments
int lua_tile_set_depth(lua_State *_pL); // takes 2 arguments
int lua_tile_set_scale(lua_State *_pL); // takes 3 arguments
int lua_tile_set_blend(lua_State *_pL); // takes 2 arguments
int lua_tile_set_alpha(lua_State *_pL); // takes 2 arguments
int lua_tile_get_count(lua_State *_pL); // takes 0 arguments
int lua_tile_get_id(lua_State *_pL); // takes 1 arguments
int lua_tile_get_ids(lua_State *_pL); // takes 0 arguments
int lua_tile_get_ids_at_depth(lua_State *_pL); // takes 1 arguments
int lua_tile_add(lua_State *_pL); // takes 8 arguments
int lua_tile_exists(lua_State *_pL); // takes 1 arguments
int lua_tile_delete(lua_State *_pL); // takes 1 arguments
int lua_tile_layer_hide(lua_State *_pL); // takes 1 arguments
int lua_tile_layer_show(lua_State *_pL); // takes 1 arguments
int lua_tile_layer_delete(lua_State *_pL); // takes 1 arguments
int lua_tile_layer_shift(lua_State *_pL); // takes 3 arguments
int lua_tile_layer_find(lua_State *_pL); // takes 3 arguments
int lua_tile_layer_delete_at(lua_State *_pL); // takes 3 arguments
int lua_tile_layer_depth(lua_State *_pL); // takes 2 arguments
int lua_surface_create(lua_State *_pL); // takes 2 arguments
int lua_surface_create_ext(lua_State *_pL); // takes 3 arguments
int lua_surface_create_special(lua_State *_pL); // takes 3 arguments
int lua_surface_resize(lua_State *_pL); // takes 3 arguments
int lua_surface_free(lua_State *_pL); // takes 1 arguments
int lua_surface_exists(lua_State *_pL); // takes 1 arguments
int lua_surface_get_width(lua_State *_pL); // takes 1 arguments
int lua_surface_get_height(lua_State *_pL); // takes 1 arguments
int lua_surface_get_texture(lua_State *_pL); // takes 1 arguments
int lua_surface_get_target(lua_State *_pL); // takes 0 arguments
int lua_surface_set_target(lua_State *_pL); // takes 1 arguments
int lua_surface_get_target_ext(lua_State *_pL); // takes 1 arguments
int lua_surface_set_target_ext(lua_State *_pL); // takes 2 arguments
int lua_surface_reset_target(lua_State *_pL); // takes 0 arguments
int lua_surface_depth_disable(lua_State *_pL); // takes 1 arguments
int lua_surface_get_depth_disable(lua_State *_pL); // takes 0 arguments
int lua_draw_surface(lua_State *_pL); // takes 3 arguments
int lua_draw_surface_ext(lua_State *_pL); // takes 8 arguments
int lua_draw_surface_stretched(lua_State *_pL); // takes 5 arguments
int lua_draw_surface_stretched_ext(lua_State *_pL); // takes 7 arguments
int lua_draw_surface_part(lua_State *_pL); // takes 7 arguments
int lua_draw_surface_part_ext(lua_State *_pL); // takes 11 arguments
int lua_draw_surface_general(lua_State *_pL); // takes 15 arguments
int lua_draw_surface_tiled(lua_State *_pL); // takes 3 arguments
int lua_draw_surface_tiled_ext(lua_State *_pL); // takes 7 arguments
int lua_surface_save(lua_State *_pL); // takes 2 arguments
int lua_surface_save_part(lua_State *_pL); // takes 6 arguments
int lua_surface_getpixel(lua_State *_pL); // takes 3 arguments
int lua_surface_getpixel_ext(lua_State *_pL); // takes 3 arguments
int lua_surface_copy(lua_State *_pL); // takes 4 arguments
int lua_surface_copy_part(lua_State *_pL); // takes 8 arguments
int lua_skeleton_animation_set(lua_State *_pL); // takes 1 arguments
int lua_skeleton_animation_get(lua_State *_pL); // takes 0 arguments
int lua_skeleton_animation_mix(lua_State *_pL); // takes 3 arguments
int lua_skeleton_animation_set_ext(lua_State *_pL); // takes 2 arguments
int lua_skeleton_animation_get_ext(lua_State *_pL); // takes 1 arguments
int lua_skeleton_animation_get_duration(lua_State *_pL); // takes 1 arguments
int lua_skeleton_animation_get_frames(lua_State *_pL); // takes 1 arguments
int lua_skeleton_animation_clear(lua_State *_pL); // takes 1 arguments
int lua_skeleton_skin_set(lua_State *_pL); // takes 2 arguments
int lua_skeleton_skin_get(lua_State *_pL); // takes 2 arguments
int lua_skeleton_attachment_set(lua_State *_pL); // takes 2 arguments
int lua_skeleton_attachment_get(lua_State *_pL); // takes 2 arguments
int lua_skeleton_attachment_create(lua_State *_pL); // takes 1 arguments
int lua_skeleton_collision_draw_set(lua_State *_pL); // takes 1 arguments
int lua_skeleton_bone_data_get(lua_State *_pL); // takes 2 arguments
int lua_skeleton_bone_data_set(lua_State *_pL); // takes 2 arguments
int lua_skeleton_bone_state_get(lua_State *_pL); // takes 2 arguments
int lua_skeleton_bone_state_set(lua_State *_pL); // takes 2 arguments
int lua_draw_skeleton(lua_State *_pL); // takes 11 arguments
int lua_draw_skeleton_time(lua_State *_pL); // takes 11 arguments
int lua_draw_skeleton_instance(lua_State *_pL); // takes 4 arguments
int lua_draw_skeleton_collision(lua_State *_pL); // takes 9 arguments
int lua_skeleton_animation_list(lua_State *_pL); // takes 2 arguments
int lua_skeleton_skin_list(lua_State *_pL); // takes 2 arguments
int lua_skeleton_slot_data(lua_State *_pL); // takes 2 arguments
int lua_skeleton_animation_get_frame(lua_State *_pL); // takes 1 arguments
int lua_skeleton_animation_set_frame(lua_State *_pL); // takes 2 arguments
int lua_skeleton_get_minmax(lua_State *_pL); // takes 0 arguments
int lua_skeleton_get_num_bounds(lua_State *_pL); // takes 0 arguments
int lua_skeleton_get_bounds(lua_State *_pL); // takes 1 arguments
int lua_draw_enable_swf_aa(lua_State *_pL); // takes 1 arguments
int lua_draw_set_swf_aa_level(lua_State *_pL); // takes 1 arguments
int lua_draw_get_swf_aa_level(lua_State *_pL); // takes 0 arguments
int lua_action_path_old(lua_State *_pL); // takes 3 arguments
int lua_action_set_sprite(lua_State *_pL); // takes 2 arguments
int lua_action_draw_font(lua_State *_pL); // takes 1 arguments
int lua_action_draw_font_old(lua_State *_pL); // takes 6 arguments
int lua_action_fill_color(lua_State *_pL); // takes 1 arguments
int lua_action_fill_colour(lua_State *_pL); // takes 1 arguments
int lua_action_line_color(lua_State *_pL); // takes 1 arguments
int lua_action_line_colour(lua_State *_pL); // takes 1 arguments
int lua_action_highscore(lua_State *_pL); // takes 0 arguments
int lua_action_set_relative(lua_State *_pL); // takes 1 arguments
int lua_action_move(lua_State *_pL); // takes 2 arguments
int lua_action_set_motion(lua_State *_pL); // takes 2 arguments
int lua_action_set_hspeed(lua_State *_pL); // takes 1 arguments
int lua_action_set_vspeed(lua_State *_pL); // takes 1 arguments
int lua_action_set_gravity(lua_State *_pL); // takes 2 arguments
int lua_action_set_friction(lua_State *_pL); // takes 1 arguments
int lua_action_move_point(lua_State *_pL); // takes 3 arguments
int lua_action_move_to(lua_State *_pL); // takes 2 arguments
int lua_action_move_start(lua_State *_pL); // takes 0 arguments
int lua_action_move_random(lua_State *_pL); // takes 2 arguments
int lua_action_snap(lua_State *_pL); // takes 2 arguments
int lua_action_wrap(lua_State *_pL); // takes 1 arguments
int lua_action_reverse_xdir(lua_State *_pL); // takes 0 arguments
int lua_action_reverse_ydir(lua_State *_pL); // takes 0 arguments
int lua_action_move_contact(lua_State *_pL); // takes 3 arguments
int lua_action_bounce(lua_State *_pL); // takes 2 arguments
int lua_action_path(lua_State *_pL); // takes 4 arguments
int lua_action_path_end(lua_State *_pL); // takes 0 arguments
int lua_action_path_position(lua_State *_pL); // takes 1 arguments
int lua_action_path_speed(lua_State *_pL); // takes 1 arguments
int lua_action_linear_step(lua_State *_pL); // takes 4 arguments
int lua_action_potential_step(lua_State *_pL); // takes 4 arguments
int lua_action_kill_object(lua_State *_pL); // takes 0 arguments
int lua_action_create_object(lua_State *_pL); // takes 3 arguments
int lua_action_create_object_motion(lua_State *_pL); // takes 5 arguments
int lua_action_create_object_random(lua_State *_pL); // takes 6 arguments
int lua_action_change_object(lua_State *_pL); // takes 2 arguments
int lua_action_kill_position(lua_State *_pL); // takes 2 arguments
int lua_action_sprite_set(lua_State *_pL); // takes 3 arguments
int lua_action_sprite_transform(lua_State *_pL); // takes 4 arguments
int lua_action_sprite_color(lua_State *_pL); // takes 2 arguments
int lua_action_sprite_colour(lua_State *_pL); // takes 2 arguments
int lua_action_sound(lua_State *_pL); // takes 2 arguments
int lua_action_end_sound(lua_State *_pL); // takes 1 arguments
int lua_action_if_sound(lua_State *_pL); // takes 1 arguments
int lua_action_another_room(lua_State *_pL); // takes 1 arguments
int lua_action_current_room(lua_State *_pL); // takes 0 arguments
int lua_action_previous_room(lua_State *_pL); // takes 0 arguments
int lua_action_next_room(lua_State *_pL); // takes 0 arguments
int lua_action_if_previous_room(lua_State *_pL); // takes 0 arguments
int lua_action_if_next_room(lua_State *_pL); // takes 0 arguments
int lua_action_set_alarm(lua_State *_pL); // takes 2 arguments
int lua_action_sleep(lua_State *_pL); // takes 2 arguments
int lua_action_set_timeline(lua_State *_pL); // takes 2 arguments
int lua_action_set_timeline_position(lua_State *_pL); // takes 1 arguments
int lua_action_set_timeline_speed(lua_State *_pL); // takes 1 arguments
int lua_action_timeline_set(lua_State *_pL); // takes 4 arguments
int lua_action_timeline_start(lua_State *_pL); // takes 0 arguments
int lua_action_timeline_pause(lua_State *_pL); // takes 0 arguments
int lua_action_timeline_stop(lua_State *_pL); // takes 0 arguments
int lua_action_message(lua_State *_pL); // takes 1 arguments
int lua_action_show_info(lua_State *_pL); // takes 0 arguments
int lua_action_show_video(lua_State *_pL); // takes 3 arguments
int lua_action_end_game(lua_State *_pL); // takes 0 arguments
int lua_action_restart_game(lua_State *_pL); // takes 0 arguments
int lua_action_save_game(lua_State *_pL); // takes 1 arguments
int lua_action_load_game(lua_State *_pL); // takes 1 arguments
int lua_action_replace_sprite(lua_State *_pL); // takes 3 arguments
int lua_action_replace_sound(lua_State *_pL); // takes 2 arguments
int lua_action_replace_background(lua_State *_pL); // takes 2 arguments
int lua_action_if_empty(lua_State *_pL); // takes 3 arguments
int lua_action_if_collision(lua_State *_pL); // takes 3 arguments
int lua_action_if(lua_State *_pL); // takes 1 arguments
int lua_action_if_number(lua_State *_pL); // takes 3 arguments
int lua_action_if_object(lua_State *_pL); // takes 3 arguments
int lua_action_if_question(lua_State *_pL); // takes 1 arguments
int lua_action_if_dice(lua_State *_pL); // takes 1 arguments
int lua_action_if_mouse(lua_State *_pL); // takes 1 arguments
int lua_action_if_aligned(lua_State *_pL); // takes 2 arguments
int lua_action_execute_script(lua_State *_pL); // takes 6 arguments
int lua_action_inherited(lua_State *_pL); // takes 0 arguments
int lua_action_if_variable(lua_State *_pL); // takes 3 arguments
int lua_action_draw_variable(lua_State *_pL); // takes 3 arguments
int lua_action_set_score(lua_State *_pL); // takes 1 arguments
int lua_action_if_score(lua_State *_pL); // takes 2 arguments
int lua_action_draw_score(lua_State *_pL); // takes 3 arguments
int lua_action_highscore_show(lua_State *_pL); // takes 11 arguments
int lua_action_highscore_clear(lua_State *_pL); // takes 0 arguments
int lua_action_set_life(lua_State *_pL); // takes 1 arguments
int lua_action_if_life(lua_State *_pL); // takes 2 arguments
int lua_action_draw_life(lua_State *_pL); // takes 3 arguments
int lua_action_draw_life_images(lua_State *_pL); // takes 3 arguments
int lua_action_set_health(lua_State *_pL); // takes 1 arguments
int lua_action_if_health(lua_State *_pL); // takes 2 arguments
int lua_action_draw_health(lua_State *_pL); // takes 6 arguments
int lua_action_set_caption(lua_State *_pL); // takes 6 arguments
int lua_action_partsyst_create(lua_State *_pL); // takes 1 arguments
int lua_action_partsyst_destroy(lua_State *_pL); // takes 0 arguments
int lua_action_partsyst_clear(lua_State *_pL); // takes 0 arguments
int lua_action_parttype_create_old(lua_State *_pL); // takes 6 arguments
int lua_action_parttype_create(lua_State *_pL); // takes 6 arguments
int lua_action_parttype_color(lua_State *_pL); // takes 6 arguments
int lua_action_parttype_colour(lua_State *_pL); // takes 6 arguments
int lua_action_parttype_life(lua_State *_pL); // takes 3 arguments
int lua_action_parttype_speed(lua_State *_pL); // takes 6 arguments
int lua_action_parttype_gravity(lua_State *_pL); // takes 3 arguments
int lua_action_parttype_secondary(lua_State *_pL); // takes 5 arguments
int lua_action_partemit_create(lua_State *_pL); // takes 6 arguments
int lua_action_partemit_destroy(lua_State *_pL); // takes 1 arguments
int lua_action_partemit_burst(lua_State *_pL); // takes 3 arguments
int lua_action_partemit_stream(lua_State *_pL); // takes 3 arguments
int lua_action_cd_play(lua_State *_pL); // takes 2 arguments
int lua_action_cd_stop(lua_State *_pL); // takes 0 arguments
int lua_action_cd_pause(lua_State *_pL); // takes 0 arguments
int lua_action_cd_resume(lua_State *_pL); // takes 0 arguments
int lua_action_cd_present(lua_State *_pL); // takes 0 arguments
int lua_action_cd_playing(lua_State *_pL); // takes 0 arguments
int lua_action_set_cursor(lua_State *_pL); // takes 2 arguments
int lua_action_webpage(lua_State *_pL); // takes 1 arguments
int lua_action_draw_sprite(lua_State *_pL); // takes 4 arguments
int lua_action_draw_background(lua_State *_pL); // takes 4 arguments
int lua_action_draw_text(lua_State *_pL); // takes 3 arguments
int lua_action_draw_text_transformed(lua_State *_pL); // takes 6 arguments
int lua_action_draw_rectangle(lua_State *_pL); // takes 5 arguments
int lua_action_draw_gradient_hor(lua_State *_pL); // takes 6 arguments
int lua_action_draw_gradient_vert(lua_State *_pL); // takes 6 arguments
int lua_action_draw_ellipse(lua_State *_pL); // takes 5 arguments
int lua_action_draw_ellipse_gradient(lua_State *_pL); // takes 6 arguments
int lua_action_draw_line(lua_State *_pL); // takes 4 arguments
int lua_action_draw_arrow(lua_State *_pL); // takes 5 arguments
int lua_action_color(lua_State *_pL); // takes 1 arguments
int lua_action_colour(lua_State *_pL); // takes 1 arguments
int lua_action_font(lua_State *_pL); // takes 2 arguments
int lua_action_fullscreen(lua_State *_pL); // takes 1 arguments
int lua_action_snapshot(lua_State *_pL); // takes 1 arguments
int lua_action_effect(lua_State *_pL); // takes 6 arguments
int lua_file_bin_open(lua_State *_pL); // takes 2 arguments
int lua_file_bin_rewrite(lua_State *_pL); // takes 1 arguments
int lua_file_bin_close(lua_State *_pL); // takes 1 arguments
int lua_file_bin_position(lua_State *_pL); // takes 1 arguments
int lua_file_bin_size(lua_State *_pL); // takes 1 arguments
int lua_file_bin_seek(lua_State *_pL); // takes 2 arguments
int lua_file_bin_read_byte(lua_State *_pL); // takes 1 arguments
int lua_file_bin_write_byte(lua_State *_pL); // takes 2 arguments
int lua_file_text_open_from_string(lua_State *_pL); // takes 1 arguments
int lua_file_text_open_read(lua_State *_pL); // takes 1 arguments
int lua_file_text_open_write(lua_State *_pL); // takes 1 arguments
int lua_file_text_open_append(lua_State *_pL); // takes 1 arguments
int lua_file_text_close(lua_State *_pL); // takes 1 arguments
int lua_file_text_read_string(lua_State *_pL); // takes 1 arguments
int lua_file_text_read_real(lua_State *_pL); // takes 1 arguments
int lua_file_text_readln(lua_State *_pL); // takes 1 arguments
int lua_file_text_eof(lua_State *_pL); // takes 1 arguments
int lua_file_text_eoln(lua_State *_pL); // takes 1 arguments
int lua_file_text_write_string(lua_State *_pL); // takes 2 arguments
int lua_file_text_write_real(lua_State *_pL); // takes 2 arguments
int lua_file_text_writeln(lua_State *_pL); // takes 1 arguments
int lua_file_open_read(lua_State *_pL); // takes 1 arguments
int lua_file_open_write(lua_State *_pL); // takes 1 arguments
int lua_file_open_append(lua_State *_pL); // takes 1 arguments
int lua_file_close(lua_State *_pL); // takes 0 arguments
int lua_file_read_string(lua_State *_pL); // takes 0 arguments
int lua_file_read_real(lua_State *_pL); // takes 0 arguments
int lua_file_readln(lua_State *_pL); // takes 0 arguments
int lua_file_eof(lua_State *_pL); // takes 0 arguments
int lua_file_write_string(lua_State *_pL); // takes 1 arguments
int lua_file_write_real(lua_State *_pL); // takes 1 arguments
int lua_file_writeln(lua_State *_pL); // takes 0 arguments
int lua_file_exists(lua_State *_pL); // takes 1 arguments
int lua_file_delete(lua_State *_pL); // takes 1 arguments
int lua_file_rename(lua_State *_pL); // takes 2 arguments
int lua_file_copy(lua_State *_pL); // takes 2 arguments
int lua_directory_exists(lua_State *_pL); // takes 1 arguments
int lua_directory_create(lua_State *_pL); // takes 1 arguments
int lua_directory_destroy(lua_State *_pL); // takes 1 arguments
int lua_file_find_first(lua_State *_pL); // takes 2 arguments
int lua_file_find_next(lua_State *_pL); // takes 0 arguments
int lua_file_find_close(lua_State *_pL); // takes 0 arguments
int lua_file_attributes(lua_State *_pL); // takes 2 arguments
int lua_filename_name(lua_State *_pL); // takes 1 arguments
int lua_filename_path(lua_State *_pL); // takes 1 arguments
int lua_filename_dir(lua_State *_pL); // takes 1 arguments
int lua_filename_drive(lua_State *_pL); // takes 1 arguments
int lua_filename_ext(lua_State *_pL); // takes 1 arguments
int lua_filename_change_ext(lua_State *_pL); // takes 2 arguments
int lua_execute_program(lua_State *_pL); // takes 3 arguments
int lua_execute_shell(lua_State *_pL); // takes 2 arguments
int lua_parameter_count(lua_State *_pL); // takes 0 arguments
int lua_parameter_string(lua_State *_pL); // takes 1 arguments
int lua_environment_get_variable(lua_State *_pL); // takes 1 arguments
int lua_ini_open_from_string(lua_State *_pL); // takes 1 arguments
int lua_ini_open(lua_State *_pL); // takes 1 arguments
int lua_ini_close(lua_State *_pL); // takes 0 arguments
int lua_ini_read_string(lua_State *_pL); // takes 3 arguments
int lua_ini_read_real(lua_State *_pL); // takes 3 arguments
int lua_ini_write_string(lua_State *_pL); // takes 3 arguments
int lua_ini_write_real(lua_State *_pL); // takes 3 arguments
int lua_ini_key_exists(lua_State *_pL); // takes 2 arguments
int lua_ini_section_exists(lua_State *_pL); // takes 1 arguments
int lua_ini_key_delete(lua_State *_pL); // takes 2 arguments
int lua_ini_section_delete(lua_State *_pL); // takes 1 arguments
int lua_http_post_string(lua_State *_pL); // takes 2 arguments
int lua_http_get(lua_State *_pL); // takes 1 arguments
int lua_http_get_file(lua_State *_pL); // takes 2 arguments
int lua_http_request(lua_State *_pL); // takes 4 arguments
int lua_http_get_request_crossorigin(lua_State *_pL); // takes 0 arguments
int lua_http_set_request_crossorigin(lua_State *_pL); // takes 1 arguments
int lua_json_encode(lua_State *_pL); // takes 1 arguments
int lua_json_decode(lua_State *_pL); // takes 1 arguments
int lua_zip_unzip(lua_State *_pL); // takes 2 arguments
int lua_load_csv(lua_State *_pL); // takes 1 arguments
int lua_sprite_name(lua_State *_pL); // takes 1 arguments
int lua_sprite_exists(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_name(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_number(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_width(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_height(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_transparent(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_smooth(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_preload(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_xoffset(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_yoffset(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_bbox_mode(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_bbox_left(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_bbox_right(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_bbox_top(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_bbox_bottom(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_precise(lua_State *_pL); // takes 1 arguments
int lua_sprite_collision_mask(lua_State *_pL); // takes 9 arguments
int lua_sprite_set_cache_size(lua_State *_pL); // takes 2 arguments
int lua_sprite_set_cache_size_ext(lua_State *_pL); // takes 3 arguments
int lua_font_set_cache_size(lua_State *_pL); // takes 2 arguments
int lua_sprite_get_tpe(lua_State *_pL); // takes 2 arguments
int lua_sprite_set_offset(lua_State *_pL); // takes 3 arguments
int lua_sprite_set_bbox_mode(lua_State *_pL); // takes 2 arguments
int lua_sprite_set_bbox(lua_State *_pL); // takes 5 arguments
int lua_sprite_set_precise(lua_State *_pL); // takes 2 arguments
int lua_sprite_set_alpha_from_sprite(lua_State *_pL); // takes 2 arguments
int lua_sprite_add(lua_State *_pL); // takes 6 arguments
int lua_sprite_create_from_screen(lua_State *_pL); // takes 8 arguments
int lua_sprite_add_from_screen(lua_State *_pL); // takes 7 arguments
int lua_sprite_create_from_surface(lua_State *_pL); // takes 9 arguments
int lua_sprite_add_from_surface(lua_State *_pL); // takes 8 arguments
int lua_sprite_replace(lua_State *_pL); // takes 7 arguments
int lua_sprite_add_sprite(lua_State *_pL); // takes 1 arguments
int lua_sprite_replace_sprite(lua_State *_pL); // takes 2 arguments
int lua_sprite_save_strip(lua_State *_pL); // takes 2 arguments
int lua_sprite_delete(lua_State *_pL); // takes 1 arguments
int lua_sprite_duplicate(lua_State *_pL); // takes 1 arguments
int lua_sprite_assign(lua_State *_pL); // takes 2 arguments
int lua_sprite_merge(lua_State *_pL); // takes 2 arguments
int lua_sprite_save(lua_State *_pL); // takes 3 arguments
int lua_sprite_prefetch(lua_State *_pL); // takes 1 arguments
int lua_sprite_prefetch_multi(lua_State *_pL); // takes 1 arguments
int lua_sprite_flush(lua_State *_pL); // takes 1 arguments
int lua_sprite_flush_multi(lua_State *_pL); // takes 1 arguments
int lua_sprite_set_speed(lua_State *_pL); // takes 3 arguments
int lua_sprite_get_speed_type(lua_State *_pL); // takes 1 arguments
int lua_sprite_get_speed(lua_State *_pL); // takes 1 arguments
int lua_background_name(lua_State *_pL); // takes 1 arguments
int lua_background_exists(lua_State *_pL); // takes 1 arguments
int lua_background_get_name(lua_State *_pL); // takes 1 arguments
int lua_background_get_width(lua_State *_pL); // takes 1 arguments
int lua_background_get_height(lua_State *_pL); // takes 1 arguments
int lua_background_get_transparent(lua_State *_pL); // takes 1 arguments
int lua_background_get_smooth(lua_State *_pL); // takes 1 arguments
int lua_background_get_preload(lua_State *_pL); // takes 1 arguments
int lua_background_set_alpha_from_background(lua_State *_pL); // takes 2 arguments
int lua_background_create_color(lua_State *_pL); // takes 3 arguments
int lua_background_create_colour(lua_State *_pL); // takes 3 arguments
int lua_background_replace(lua_State *_pL); // takes 4 arguments
int lua_background_create_from_screen(lua_State *_pL); // takes 6 arguments
int lua_background_create_from_surface(lua_State *_pL); // takes 7 arguments
int lua_background_create_gradient(lua_State *_pL); // takes 5 arguments
int lua_background_add(lua_State *_pL); // takes 3 arguments
int lua_background_add_background(lua_State *_pL); // takes 1 arguments
int lua_background_replace_background(lua_State *_pL); // takes 2 arguments
int lua_background_delete(lua_State *_pL); // takes 1 arguments
int lua_background_duplicate(lua_State *_pL); // takes 1 arguments
int lua_background_assign(lua_State *_pL); // takes 2 arguments
int lua_background_save(lua_State *_pL); // takes 2 arguments
int lua_background_prefetch(lua_State *_pL); // takes 1 arguments
int lua_background_prefetch_multi(lua_State *_pL); // takes 1 arguments
int lua_background_flush(lua_State *_pL); // takes 1 arguments
int lua_background_flush_multi(lua_State *_pL); // takes 1 arguments
int lua_texture_is_ready(lua_State *_pL); // takes 1 arguments
int lua_texture_prefetch(lua_State *_pL); // takes 1 arguments
int lua_texture_flush(lua_State *_pL); // takes 1 arguments
int lua_texturegroup_get_textures(lua_State *_pL); // takes 1 arguments
int lua_texturegroup_get_sprites(lua_State *_pL); // takes 1 arguments
int lua_texturegroup_get_fonts(lua_State *_pL); // takes 1 arguments
int lua_texturegroup_get_tilesets(lua_State *_pL); // takes 1 arguments
int lua_texture_debug_messages(lua_State *_pL); // takes 1 arguments
int lua_sound_name(lua_State *_pL); // takes 1 arguments
int lua_sound_exists(lua_State *_pL); // takes 1 arguments
int lua_sound_get_name(lua_State *_pL); // takes 1 arguments
int lua_sound_get_kind(lua_State *_pL); // takes 1 arguments
int lua_sound_get_preload(lua_State *_pL); // takes 1 arguments
int lua_sound_discard(lua_State *_pL); // takes 1 arguments
int lua_sound_restore(lua_State *_pL); // takes 1 arguments
int lua_sound_add(lua_State *_pL); // takes 3 arguments
int lua_sound_replace(lua_State *_pL); // takes 4 arguments
int lua_sound_delete(lua_State *_pL); // takes 1 arguments
int lua_audio_delete(lua_State *_pL); // takes 1 arguments
int lua_font_name(lua_State *_pL); // takes 1 arguments
int lua_font_exists(lua_State *_pL); // takes 1 arguments
int lua_font_get_name(lua_State *_pL); // takes 1 arguments
int lua_font_get_fontname(lua_State *_pL); // takes 1 arguments
int lua_font_get_size(lua_State *_pL); // takes 1 arguments
int lua_font_get_bold(lua_State *_pL); // takes 1 arguments
int lua_font_get_italic(lua_State *_pL); // takes 1 arguments
int lua_font_get_first(lua_State *_pL); // takes 1 arguments
int lua_font_get_last(lua_State *_pL); // takes 1 arguments
int lua_font_add_enable_aa(lua_State *_pL); // takes 1 arguments
int lua_font_add_get_enable_aa(lua_State *_pL); // takes 0 arguments
int lua_font_add(lua_State *_pL); // takes 6 arguments
int lua_font_add_sprite(lua_State *_pL); // takes 4 arguments
int lua_font_add_sprite_ext(lua_State *_pL); // takes 4 arguments
int lua_font_replace_sprite(lua_State *_pL); // takes 5 arguments
int lua_font_replace_sprite_ext(lua_State *_pL); // takes 5 arguments
int lua_font_delete(lua_State *_pL); // takes 1 arguments
int lua_font_set_dynamic_texture_size(lua_State *_pL); // takes 1 arguments
int lua_font_get_dynamic_texture_size(lua_State *_pL); // takes 0 arguments
int lua_script_exists(lua_State *_pL); // takes 1 arguments
int lua_script_get_name(lua_State *_pL); // takes 1 arguments
int lua_script_get_text(lua_State *_pL); // takes 1 arguments
int lua_script_execute(lua_State *_pL); // takes -1 arguments
int lua_path_name(lua_State *_pL); // takes 1 arguments
int lua_path_exists(lua_State *_pL); // takes 1 arguments
int lua_path_get_name(lua_State *_pL); // takes 1 arguments
int lua_path_get_length(lua_State *_pL); // takes 1 arguments
int lua_path_get_time(lua_State *_pL); // takes 2 arguments
int lua_path_get_kind(lua_State *_pL); // takes 1 arguments
int lua_path_get_closed(lua_State *_pL); // takes 1 arguments
int lua_path_get_precision(lua_State *_pL); // takes 1 arguments
int lua_path_get_number(lua_State *_pL); // takes 1 arguments
int lua_path_get_point_x(lua_State *_pL); // takes 2 arguments
int lua_path_get_point_y(lua_State *_pL); // takes 2 arguments
int lua_path_get_point_speed(lua_State *_pL); // takes 2 arguments
int lua_path_get_x(lua_State *_pL); // takes 2 arguments
int lua_path_get_y(lua_State *_pL); // takes 2 arguments
int lua_path_get_speed(lua_State *_pL); // takes 2 arguments
int lua_path_set_kind(lua_State *_pL); // takes 2 arguments
int lua_path_set_closed(lua_State *_pL); // takes 2 arguments
int lua_path_set_precision(lua_State *_pL); // takes 2 arguments
int lua_path_add(lua_State *_pL); // takes 0 arguments
int lua_path_duplicate(lua_State *_pL); // takes 1 arguments
int lua_path_assign(lua_State *_pL); // takes 2 arguments
int lua_path_append(lua_State *_pL); // takes 2 arguments
int lua_path_delete(lua_State *_pL); // takes 1 arguments
int lua_path_add_point(lua_State *_pL); // takes 4 arguments
int lua_path_insert_point(lua_State *_pL); // takes 5 arguments
int lua_path_change_point(lua_State *_pL); // takes 5 arguments
int lua_path_delete_point(lua_State *_pL); // takes 2 arguments
int lua_path_clear_points(lua_State *_pL); // takes 1 arguments
int lua_path_reverse(lua_State *_pL); // takes 1 arguments
int lua_path_mirror(lua_State *_pL); // takes 1 arguments
int lua_path_flip(lua_State *_pL); // takes 1 arguments
int lua_path_rotate(lua_State *_pL); // takes 2 arguments
int lua_path_rescale(lua_State *_pL); // takes 3 arguments
int lua_path_shift(lua_State *_pL); // takes 3 arguments
int lua_timeline_name(lua_State *_pL); // takes 1 arguments
int lua_timeline_exists(lua_State *_pL); // takes 1 arguments
int lua_timeline_get_name(lua_State *_pL); // takes 1 arguments
int lua_timeline_add(lua_State *_pL); // takes 0 arguments
int lua_timeline_delete(lua_State *_pL); // takes 1 arguments
int lua_timeline_moment_clear(lua_State *_pL); // takes 2 arguments
int lua_timeline_clear(lua_State *_pL); // takes 1 arguments
int lua_timeline_moment_add(lua_State *_pL); // takes 3 arguments
int lua_timeline_moment_add_script(lua_State *_pL); // takes 3 arguments
int lua_timeline_size(lua_State *_pL); // takes 1 arguments
int lua_timeline_max_moment(lua_State *_pL); // takes 1 arguments
int lua_object_name(lua_State *_pL); // takes 1 arguments
int lua_object_exists(lua_State *_pL); // takes 1 arguments
int lua_object_get_name(lua_State *_pL); // takes 1 arguments
int lua_object_get_sprite(lua_State *_pL); // takes 1 arguments
int lua_object_get_solid(lua_State *_pL); // takes 1 arguments
int lua_object_get_visible(lua_State *_pL); // takes 1 arguments
int lua_object_get_persistent(lua_State *_pL); // takes 1 arguments
int lua_object_get_mask(lua_State *_pL); // takes 1 arguments
int lua_object_get_parent(lua_State *_pL); // takes 1 arguments
int lua_object_get_physics(lua_State *_pL); // takes 1 arguments
int lua_object_is_ancestor(lua_State *_pL); // takes 2 arguments
int lua_object_set_sprite(lua_State *_pL); // takes 2 arguments
int lua_object_set_solid(lua_State *_pL); // takes 2 arguments
int lua_object_set_visible(lua_State *_pL); // takes 2 arguments
int lua_object_set_persistent(lua_State *_pL); // takes 2 arguments
int lua_object_set_mask(lua_State *_pL); // takes 2 arguments
int lua_object_set_parent(lua_State *_pL); // takes 2 arguments
int lua_object_set_collisions(lua_State *_pL); // takes 2 arguments
int lua_object_add(lua_State *_pL); // takes 0 arguments
int lua_object_delete(lua_State *_pL); // takes 1 arguments
int lua_object_event_clear(lua_State *_pL); // takes 3 arguments
int lua_object_event_add(lua_State *_pL); // takes 4 arguments
int lua_room_name(lua_State *_pL); // takes 1 arguments
int lua_room_exists(lua_State *_pL); // takes 1 arguments
int lua_room_get_name(lua_State *_pL); // takes 1 arguments
int lua_room_set_width(lua_State *_pL); // takes 2 arguments
int lua_room_set_height(lua_State *_pL); // takes 2 arguments
int lua_room_set_caption(lua_State *_pL); // takes 2 arguments
int lua_room_set_persistent(lua_State *_pL); // takes 2 arguments
int lua_room_set_code(lua_State *_pL); // takes 2 arguments
int lua_room_set_background_color(lua_State *_pL); // takes 3 arguments
int lua_room_set_background_colour(lua_State *_pL); // takes 3 arguments
int lua_room_set_background(lua_State *_pL); // takes 12 arguments
int lua_room_set_viewport(lua_State *_pL); // takes 7 arguments
int lua_room_get_viewport(lua_State *_pL); // takes 2 arguments
int lua_room_set_view_enabled(lua_State *_pL); // takes 2 arguments
int lua_room_add(lua_State *_pL); // takes 0 arguments
int lua_room_duplicate(lua_State *_pL); // takes 1 arguments
int lua_room_assign(lua_State *_pL); // takes 2 arguments
int lua_room_instance_add(lua_State *_pL); // takes 4 arguments
int lua_room_instance_clear(lua_State *_pL); // takes 1 arguments
int lua_room_tile_add(lua_State *_pL); // takes 9 arguments
int lua_room_tile_add_ext(lua_State *_pL); // takes 12 arguments
int lua_room_tile_clear(lua_State *_pL); // takes 1 arguments
int lua_room_get_camera(lua_State *_pL); // takes 2 arguments
int lua_room_set_camera(lua_State *_pL); // takes 3 arguments
int lua_asset_get_index(lua_State *_pL); // takes 1 arguments
int lua_asset_get_type(lua_State *_pL); // takes 1 arguments
int lua_splash_set_caption(lua_State *_pL); // takes 1 arguments
int lua_splash_set_fullscreen(lua_State *_pL); // takes 1 arguments
int lua_splash_set_border(lua_State *_pL); // takes 1 arguments
int lua_splash_set_size(lua_State *_pL); // takes 2 arguments
int lua_splash_set_adapt(lua_State *_pL); // takes 1 arguments
int lua_splash_set_top(lua_State *_pL); // takes 1 arguments
int lua_splash_set_color(lua_State *_pL); // takes 1 arguments
int lua_splash_set_main(lua_State *_pL); // takes 1 arguments
int lua_splash_set_scale(lua_State *_pL); // takes 1 arguments
int lua_splash_set_cursor(lua_State *_pL); // takes 1 arguments
int lua_splash_set_interrupt(lua_State *_pL); // takes 1 arguments
int lua_splash_set_stop_key(lua_State *_pL); // takes 1 arguments
int lua_splash_set_stop_mouse(lua_State *_pL); // takes 1 arguments
int lua_splash_show_video(lua_State *_pL); // takes 2 arguments
int lua_splash_show_image(lua_State *_pL); // takes 2 arguments
int lua_splash_show_text(lua_State *_pL); // takes 2 arguments
int lua_show_image(lua_State *_pL); // takes 3 arguments
int lua_show_video(lua_State *_pL); // takes 3 arguments
int lua_show_text(lua_State *_pL); // takes 4 arguments
int lua_show_message(lua_State *_pL); // takes 1 arguments
int lua_show_question(lua_State *_pL); // takes 1 arguments
int lua_show_message_async(lua_State *_pL); // takes 1 arguments
int lua_show_question_async(lua_State *_pL); // takes 1 arguments
int lua_show_error(lua_State *_pL); // takes 2 arguments
int lua_show_info(lua_State *_pL); // takes 0 arguments
int lua_load_info(lua_State *_pL); // takes 1 arguments
int lua_highscore_show(lua_State *_pL); // takes 1 arguments
int lua_highscore_set_background(lua_State *_pL); // takes 1 arguments
int lua_highscore_set_border(lua_State *_pL); // takes 1 arguments
int lua_highscore_set_font(lua_State *_pL); // takes 3 arguments
int lua_highscore_set_strings(lua_State *_pL); // takes 3 arguments
int lua_highscore_set_colors(lua_State *_pL); // takes 3 arguments
int lua_highscore_show_ext(lua_State *_pL); // takes 7 arguments
int lua_highscore_clear(lua_State *_pL); // takes 0 arguments
int lua_highscore_add(lua_State *_pL); // takes 2 arguments
int lua_highscore_add_current(lua_State *_pL); // takes 0 arguments
int lua_highscore_value(lua_State *_pL); // takes 1 arguments
int lua_highscore_name(lua_State *_pL); // takes 1 arguments
int lua_draw_highscore(lua_State *_pL); // takes 4 arguments
int lua_show_message_ext(lua_State *_pL); // takes 4 arguments
int lua_message_background(lua_State *_pL); // takes 1 arguments
int lua_message_button(lua_State *_pL); // takes 1 arguments
int lua_message_alpha(lua_State *_pL); // takes 1 arguments
int lua_message_text_font(lua_State *_pL); // takes 4 arguments
int lua_message_button_font(lua_State *_pL); // takes 4 arguments
int lua_message_input_font(lua_State *_pL); // takes 4 arguments
int lua_message_mouse_color(lua_State *_pL); // takes 1 arguments
int lua_message_input_color(lua_State *_pL); // takes 1 arguments
int lua_message_position(lua_State *_pL); // takes 2 arguments
int lua_message_size(lua_State *_pL); // takes 2 arguments
int lua_message_caption(lua_State *_pL); // takes 2 arguments
int lua_show_menu(lua_State *_pL); // takes 2 arguments
int lua_show_menu_pos(lua_State *_pL); // takes 4 arguments
int lua_get_integer(lua_State *_pL); // takes 2 arguments
int lua_get_integer_async(lua_State *_pL); // takes 2 arguments
int lua_get_string(lua_State *_pL); // takes 2 arguments
int lua_get_string_async(lua_State *_pL); // takes 2 arguments
int lua_get_login_async(lua_State *_pL); // takes 2 arguments
int lua_get_color(lua_State *_pL); // takes 1 arguments
int lua_get_open_filename(lua_State *_pL); // takes 2 arguments
int lua_get_save_filename(lua_State *_pL); // takes 2 arguments
int lua_get_open_filename_ext(lua_State *_pL); // takes 4 arguments
int lua_get_save_filename_ext(lua_State *_pL); // takes 4 arguments
int lua_get_directory(lua_State *_pL); // takes 1 arguments
int lua_get_directory_alt(lua_State *_pL); // takes 2 arguments
int lua_keyboard_get_numlock(lua_State *_pL); // takes 0 arguments
int lua_keyboard_set_numlock(lua_State *_pL); // takes 1 arguments
int lua_keyboard_key_press(lua_State *_pL); // takes 1 arguments
int lua_keyboard_key_release(lua_State *_pL); // takes 1 arguments
int lua_keyboard_set_map(lua_State *_pL); // takes 2 arguments
int lua_keyboard_get_map(lua_State *_pL); // takes 1 arguments
int lua_keyboard_unset_map(lua_State *_pL); // takes 0 arguments
int lua_keyboard_check(lua_State *_pL); // takes 1 arguments
int lua_keyboard_check_pressed(lua_State *_pL); // takes 1 arguments
int lua_keyboard_check_released(lua_State *_pL); // takes 1 arguments
int lua_keyboard_check_direct(lua_State *_pL); // takes 1 arguments
int lua_mouse_check_button(lua_State *_pL); // takes 1 arguments
int lua_mouse_check_button_pressed(lua_State *_pL); // takes 1 arguments
int lua_mouse_check_button_released(lua_State *_pL); // takes 1 arguments
int lua_mouse_wheel_up(lua_State *_pL); // takes 0 arguments
int lua_mouse_wheel_down(lua_State *_pL); // takes 0 arguments
int lua_keyboard_virtual_show(lua_State *_pL); // takes 4 arguments
int lua_keyboard_virtual_hide(lua_State *_pL); // takes 0 arguments
int lua_keyboard_virtual_status(lua_State *_pL); // takes 0 arguments
int lua_keyboard_virtual_height(lua_State *_pL); // takes 0 arguments
int lua_keyboard_clear(lua_State *_pL); // takes 1 arguments
int lua_mouse_clear(lua_State *_pL); // takes 1 arguments
int lua_io_clear(lua_State *_pL); // takes 0 arguments
int lua_io_handle(lua_State *_pL); // takes 0 arguments
int lua_device_mouse_dbclick_enable(lua_State *_pL); // takes 0 arguments
int lua_keyboard_wait(lua_State *_pL); // takes 0 arguments
int lua_mouse_wait(lua_State *_pL); // takes 0 arguments
int lua_browser_input_capture(lua_State *_pL); // takes 1 arguments
int lua_gpio_set(lua_State *_pL); // takes 2 arguments
int lua_gpio_clear(lua_State *_pL); // takes 1 arguments
int lua_gpio_get(lua_State *_pL); // takes 1 arguments
int lua_gpio_set_mode(lua_State *_pL); // takes 2 arguments
int lua_F_GPIO_Set_Function(lua_State *_pL); // takes 2 arguments
int lua_gesture_drag_time(lua_State *_pL); // takes 1 arguments
int lua_gesture_drag_distance(lua_State *_pL); // takes 1 arguments
int lua_gesture_flick_speed(lua_State *_pL); // takes 1 arguments
int lua_gesture_double_tap_time(lua_State *_pL); // takes 1 arguments
int lua_gesture_double_tap_distance(lua_State *_pL); // takes 1 arguments
int lua_gesture_pinch_distance(lua_State *_pL); // takes 1 arguments
int lua_gesture_pinch_angle_towards(lua_State *_pL); // takes 1 arguments
int lua_gesture_pinch_angle_away(lua_State *_pL); // takes 1 arguments
int lua_gesture_rotate_time(lua_State *_pL); // takes 1 arguments
int lua_gesture_rotate_angle(lua_State *_pL); // takes 1 arguments
int lua_gesture_tap_count(lua_State *_pL); // takes 1 arguments
int lua_gesture_get_drag_time(lua_State *_pL); // takes 0 arguments
int lua_gesture_get_drag_distance(lua_State *_pL); // takes 0 arguments
int lua_gesture_get_flick_speed(lua_State *_pL); // takes 0 arguments
int lua_gesture_get_double_tap_time(lua_State *_pL); // takes 0 arguments
int lua_gesture_get_double_tap_distance(lua_State *_pL); // takes 0 arguments
int lua_gesture_get_pinch_distance(lua_State *_pL); // takes 0 arguments
int lua_gesture_get_pinch_angle_towards(lua_State *_pL); // takes 0 arguments
int lua_gesture_get_pinch_angle_away(lua_State *_pL); // takes 0 arguments
int lua_gesture_get_rotate_time(lua_State *_pL); // takes 0 arguments
int lua_gesture_get_rotate_angle(lua_State *_pL); // takes 0 arguments
int lua_gesture_get_tap_count(lua_State *_pL); // takes 0 arguments
int lua_matrix_get(lua_State *_pL); // takes 1 arguments
int lua_matrix_set(lua_State *_pL); // takes 2 arguments
int lua_matrix_build_identity(lua_State *_pL); // takes 0 arguments
int lua_matrix_build(lua_State *_pL); // takes 9 arguments
int lua_matrix_build_lookat(lua_State *_pL); // takes 9 arguments
int lua_matrix_build_projection_ortho(lua_State *_pL); // takes 4 arguments
int lua_matrix_build_projection_perspective(lua_State *_pL); // takes 4 arguments
int lua_matrix_build_projection_perspective_fov(lua_State *_pL); // takes 4 arguments
int lua_matrix_multiply(lua_State *_pL); // takes 2 arguments
int lua_matrix_transform_vertex(lua_State *_pL); // takes 4 arguments
int lua_frustum_build(lua_State *_pL); // takes 0 arguments
int lua_frustum_test_sphere(lua_State *_pL); // takes 4 arguments
int lua_draw_texture_flush(lua_State *_pL); // takes 0 arguments
int lua_draw_flush(lua_State *_pL); // takes 0 arguments
int lua_matrix_stack_push(lua_State *_pL); // takes 0 arguments
int lua_matrix_stack_pop(lua_State *_pL); // takes 0 arguments
int lua_matrix_stack_set(lua_State *_pL); // takes 1 arguments
int lua_matrix_stack_clear(lua_State *_pL); // takes 0 arguments
int lua_matrix_stack_top(lua_State *_pL); // takes 0 arguments
int lua_matrix_stack_is_empty(lua_State *_pL); // takes 0 arguments
int lua_gpu_set_blendenable(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_ztestenable(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_zfunc(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_zwriteenable(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_fog(lua_State *_pL); // takes -1 arguments
int lua_gpu_set_cullmode(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_blendmode(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_blendmode_ext(lua_State *_pL); // takes -1 arguments
int lua_gpu_set_blendmode_ext_sepalpha(lua_State *_pL); // takes -1 arguments
int lua_gpu_set_colorwriteenable(lua_State *_pL); // takes -1 arguments
int lua_gpu_set_colourwriteenable(lua_State *_pL); // takes -1 arguments
int lua_gpu_set_alphatestenable(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_alphatestref(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_alphatestfunc(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_texfilter(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_texfilter_ext(lua_State *_pL); // takes 2 arguments
int lua_gpu_set_texrepeat(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_texrepeat_ext(lua_State *_pL); // takes 2 arguments
int lua_gpu_set_tex_filter(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_tex_filter_ext(lua_State *_pL); // takes 2 arguments
int lua_gpu_set_tex_repeat(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_tex_repeat_ext(lua_State *_pL); // takes 2 arguments
int lua_gpu_set_tex_mip_filter(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_tex_mip_filter_ext(lua_State *_pL); // takes 2 arguments
int lua_gpu_set_tex_mip_bias(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_tex_mip_bias_ext(lua_State *_pL); // takes 2 arguments
int lua_gpu_set_tex_min_mip(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_tex_min_mip_ext(lua_State *_pL); // takes 2 arguments
int lua_gpu_set_tex_max_mip(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_tex_max_mip_ext(lua_State *_pL); // takes 2 arguments
int lua_gpu_set_tex_max_aniso(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_tex_max_aniso_ext(lua_State *_pL); // takes 2 arguments
int lua_gpu_set_tex_mip_enable(lua_State *_pL); // takes 1 arguments
int lua_gpu_set_tex_mip_enable_ext(lua_State *_pL); // takes 2 arguments
int lua_gpu_get_blendenable(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_ztestenable(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_zfunc(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_zwriteenable(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_fog(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_cullmode(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_blendmode(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_blendmode_ext(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_blendmode_ext_sepalpha(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_blendmode_src(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_blendmode_dest(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_blendmode_srcalpha(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_blendmode_destalpha(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_colorwriteenable(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_colourwriteenable(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_alphatestenable(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_alphatestref(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_alphatestfunc(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_texfilter(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_texfilter_ext(lua_State *_pL); // takes 1 arguments
int lua_gpu_get_texrepeat(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_texrepeat_ext(lua_State *_pL); // takes 1 arguments
int lua_gpu_get_tex_filter(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_tex_filter_ext(lua_State *_pL); // takes 1 arguments
int lua_gpu_get_tex_repeat(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_tex_repeat_ext(lua_State *_pL); // takes 1 arguments
int lua_gpu_get_tex_mip_filter(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_tex_mip_filter_ext(lua_State *_pL); // takes 1 arguments
int lua_gpu_get_tex_mip_bias(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_tex_mip_bias_ext(lua_State *_pL); // takes 1 arguments
int lua_gpu_get_tex_min_mip(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_tex_min_mip_ext(lua_State *_pL); // takes 1 arguments
int lua_gpu_get_tex_max_mip(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_tex_max_mip_ext(lua_State *_pL); // takes 1 arguments
int lua_gpu_get_tex_max_aniso(lua_State *_pL); // takes 1 arguments
int lua_gpu_get_tex_max_aniso_ext(lua_State *_pL); // takes 2 arguments
int lua_gpu_get_tex_mip_enable(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_tex_mip_enable_ext(lua_State *_pL); // takes 1 arguments
int lua_gpu_push_state(lua_State *_pL); // takes 0 arguments
int lua_gpu_pop_state(lua_State *_pL); // takes 0 arguments
int lua_gpu_get_state(lua_State *_pL); // takes 0 arguments
int lua_gpu_set_state(lua_State *_pL); // takes 1 arguments
int lua_draw_light_define_ambient(lua_State *_pL); // takes 1 arguments
int lua_draw_light_define_direction(lua_State *_pL); // takes 5 arguments
int lua_draw_light_define_point(lua_State *_pL); // takes 6 arguments
int lua_draw_light_enable(lua_State *_pL); // takes 2 arguments
int lua_draw_set_lighting(lua_State *_pL); // takes 1 arguments
int lua_draw_light_get_ambient(lua_State *_pL); // takes 0 arguments
int lua_draw_light_get(lua_State *_pL); // takes 1 arguments
int lua_draw_get_lighting(lua_State *_pL); // takes 0 arguments
int lua_part_type_create(lua_State *_pL); // takes 0 arguments
int lua_part_type_destroy(lua_State *_pL); // takes 1 arguments
int lua_part_type_exists(lua_State *_pL); // takes 1 arguments
int lua_part_type_clear(lua_State *_pL); // takes 1 arguments
int lua_part_type_shape(lua_State *_pL); // takes 2 arguments
int lua_part_type_sprite(lua_State *_pL); // takes 5 arguments
int lua_part_type_size(lua_State *_pL); // takes 5 arguments
int lua_part_type_scale(lua_State *_pL); // takes 3 arguments
int lua_part_type_life(lua_State *_pL); // takes 3 arguments
int lua_part_type_step(lua_State *_pL); // takes 3 arguments
int lua_part_type_death(lua_State *_pL); // takes 3 arguments
int lua_part_type_speed(lua_State *_pL); // takes 5 arguments
int lua_part_type_direction(lua_State *_pL); // takes 5 arguments
int lua_part_type_orientation(lua_State *_pL); // takes 6 arguments
int lua_part_type_gravity(lua_State *_pL); // takes 3 arguments
int lua_part_type_color_mix(lua_State *_pL); // takes 3 arguments
int lua_part_type_color_rgb(lua_State *_pL); // takes 7 arguments
int lua_part_type_color_hsv(lua_State *_pL); // takes 7 arguments
int lua_part_type_color1(lua_State *_pL); // takes 2 arguments
int lua_part_type_color2(lua_State *_pL); // takes 3 arguments
int lua_part_type_color3(lua_State *_pL); // takes 4 arguments
int lua_part_type_color(lua_State *_pL); // takes 4 arguments
int lua_part_type_colour_mix(lua_State *_pL); // takes 3 arguments
int lua_part_type_colour_rgb(lua_State *_pL); // takes 7 arguments
int lua_part_type_colour_hsv(lua_State *_pL); // takes 7 arguments
int lua_part_type_colour1(lua_State *_pL); // takes 2 arguments
int lua_part_type_colour2(lua_State *_pL); // takes 3 arguments
int lua_part_type_colour3(lua_State *_pL); // takes 4 arguments
int lua_part_type_colour(lua_State *_pL); // takes 4 arguments
int lua_part_type_alpha1(lua_State *_pL); // takes 2 arguments
int lua_part_type_alpha2(lua_State *_pL); // takes 3 arguments
int lua_part_type_alpha3(lua_State *_pL); // takes 4 arguments
int lua_part_type_alpha(lua_State *_pL); // takes 4 arguments
int lua_part_type_blend(lua_State *_pL); // takes 2 arguments
int lua_part_system_create(lua_State *_pL); // takes 0 arguments
int lua_part_system_destroy(lua_State *_pL); // takes 1 arguments
int lua_part_system_exists(lua_State *_pL); // takes 1 arguments
int lua_part_system_clear(lua_State *_pL); // takes 1 arguments
int lua_part_system_draw_order(lua_State *_pL); // takes 2 arguments
int lua_part_system_depth(lua_State *_pL); // takes 2 arguments
int lua_part_system_position(lua_State *_pL); // takes 3 arguments
int lua_part_system_automatic_update(lua_State *_pL); // takes 2 arguments
int lua_part_system_automatic_draw(lua_State *_pL); // takes 2 arguments
int lua_part_system_update(lua_State *_pL); // takes 1 arguments
int lua_part_system_drawit(lua_State *_pL); // takes 1 arguments
int lua_part_system_create_layer(lua_State *_pL); // takes 2 arguments
int lua_part_system_get_layer(lua_State *_pL); // takes 1 arguments
int lua_part_system_layer(lua_State *_pL); // takes 2 arguments
int lua_part_particles_create(lua_State *_pL); // takes 5 arguments
int lua_part_particles_create_color(lua_State *_pL); // takes 6 arguments
int lua_part_particles_create_colour(lua_State *_pL); // takes 6 arguments
int lua_part_particles_clear(lua_State *_pL); // takes 1 arguments
int lua_part_particles_count(lua_State *_pL); // takes 1 arguments
int lua_part_emitter_create(lua_State *_pL); // takes 1 arguments
int lua_part_emitter_destroy(lua_State *_pL); // takes 2 arguments
int lua_part_emitter_destroy_all(lua_State *_pL); // takes 1 arguments
int lua_part_emitter_exists(lua_State *_pL); // takes 2 arguments
int lua_part_emitter_clear(lua_State *_pL); // takes 2 arguments
int lua_part_emitter_region(lua_State *_pL); // takes 8 arguments
int lua_part_emitter_burst(lua_State *_pL); // takes 4 arguments
int lua_part_emitter_stream(lua_State *_pL); // takes 4 arguments
int lua_effect_create_below(lua_State *_pL); // takes 5 arguments
int lua_effect_create_above(lua_State *_pL); // takes 5 arguments
int lua_effect_clear(lua_State *_pL); // takes 0 arguments
int lua_event_inherited(lua_State *_pL); // takes 0 arguments
int lua_event_perform(lua_State *_pL); // takes 2 arguments
int lua_event_user(lua_State *_pL); // takes 1 arguments
int lua_event_perform_object(lua_State *_pL); // takes 3 arguments
int lua_external_define(lua_State *_pL); // takes -1 arguments
int lua_external_call(lua_State *_pL); // takes -1 arguments
int lua_external_free(lua_State *_pL); // takes 1 arguments
int lua_external_define0(lua_State *_pL); // takes 3 arguments
int lua_external_call0(lua_State *_pL); // takes 1 arguments
int lua_external_define1(lua_State *_pL); // takes 4 arguments
int lua_external_call1(lua_State *_pL); // takes 2 arguments
int lua_external_define2(lua_State *_pL); // takes 5 arguments
int lua_external_call2(lua_State *_pL); // takes 3 arguments
int lua_external_define3(lua_State *_pL); // takes 6 arguments
int lua_external_call3(lua_State *_pL); // takes 4 arguments
int lua_external_define4(lua_State *_pL); // takes 7 arguments
int lua_external_call4(lua_State *_pL); // takes 5 arguments
int lua_external_define5(lua_State *_pL); // takes 3 arguments
int lua_external_call5(lua_State *_pL); // takes 6 arguments
int lua_external_define6(lua_State *_pL); // takes 3 arguments
int lua_external_call6(lua_State *_pL); // takes 7 arguments
int lua_external_define7(lua_State *_pL); // takes 3 arguments
int lua_external_call7(lua_State *_pL); // takes 8 arguments
int lua_external_define8(lua_State *_pL); // takes 3 arguments
int lua_external_call8(lua_State *_pL); // takes 9 arguments
int lua_window_handle(lua_State *_pL); // takes 0 arguments
int lua_window_device(lua_State *_pL); // takes 0 arguments
int lua_show_debug_message(lua_State *_pL); // takes 1 arguments
int lua_show_debug_overlay(lua_State *_pL); // takes 1 arguments
int lua_debug_event(lua_State *_pL); // takes 1 arguments
int lua_debug_get_callstack(lua_State *_pL); // takes 0 arguments
int lua_set_program_priority(lua_State *_pL); // takes 1 arguments
int lua_set_application_title(lua_State *_pL); // takes 1 arguments
int lua_gif_add_surface(lua_State *_pL); // takes 3 arguments
int lua_gif_save(lua_State *_pL); // takes 2 arguments
int lua_gif_open(lua_State *_pL); // takes 2 arguments
int lua_alarm_set(lua_State *_pL); // takes 2 arguments
int lua_alarm_get(lua_State *_pL); // takes 1 arguments
int lua_variable_global_exists(lua_State *_pL); // takes 1 arguments
int lua_variable_global_get(lua_State *_pL); // takes 1 arguments
int lua_variable_global_set(lua_State *_pL); // takes 2 arguments
int lua_variable_instance_exists(lua_State *_pL); // takes 2 arguments
int lua_variable_instance_get(lua_State *_pL); // takes 2 arguments
int lua_variable_instance_set(lua_State *_pL); // takes 3 arguments
int lua_variable_instance_get_names(lua_State *_pL); // takes 1 arguments
int lua_clipboard_has_text(lua_State *_pL); // takes 0 arguments
int lua_clipboard_set_text(lua_State *_pL); // takes 1 arguments
int lua_clipboard_get_text(lua_State *_pL); // takes 0 arguments
int lua_date_current_datetime(lua_State *_pL); // takes 0 arguments
int lua_date_current_date(lua_State *_pL); // takes 0 arguments
int lua_date_current_time(lua_State *_pL); // takes 0 arguments
int lua_date_create_datetime(lua_State *_pL); // takes 6 arguments
int lua_date_create_date(lua_State *_pL); // takes 3 arguments
int lua_date_create_time(lua_State *_pL); // takes 3 arguments
int lua_date_valid_datetime(lua_State *_pL); // takes 6 arguments
int lua_date_valid_date(lua_State *_pL); // takes 3 arguments
int lua_date_valid_time(lua_State *_pL); // takes 3 arguments
int lua_date_inc_year(lua_State *_pL); // takes 2 arguments
int lua_date_inc_month(lua_State *_pL); // takes 2 arguments
int lua_date_inc_week(lua_State *_pL); // takes 2 arguments
int lua_date_inc_day(lua_State *_pL); // takes 2 arguments
int lua_date_inc_hour(lua_State *_pL); // takes 2 arguments
int lua_date_inc_minute(lua_State *_pL); // takes 2 arguments
int lua_date_inc_second(lua_State *_pL); // takes 2 arguments
int lua_date_get_year(lua_State *_pL); // takes 1 arguments
int lua_date_get_month(lua_State *_pL); // takes 1 arguments
int lua_date_get_week(lua_State *_pL); // takes 1 arguments
int lua_date_get_day(lua_State *_pL); // takes 1 arguments
int lua_date_get_hour(lua_State *_pL); // takes 1 arguments
int lua_date_get_minute(lua_State *_pL); // takes 1 arguments
int lua_date_get_second(lua_State *_pL); // takes 1 arguments
int lua_date_get_weekday(lua_State *_pL); // takes 1 arguments
int lua_date_get_day_of_year(lua_State *_pL); // takes 1 arguments
int lua_date_get_hour_of_year(lua_State *_pL); // takes 1 arguments
int lua_date_get_minute_of_year(lua_State *_pL); // takes 1 arguments
int lua_date_get_second_of_year(lua_State *_pL); // takes 1 arguments
int lua_date_year_span(lua_State *_pL); // takes 2 arguments
int lua_date_month_span(lua_State *_pL); // takes 2 arguments
int lua_date_week_span(lua_State *_pL); // takes 2 arguments
int lua_date_day_span(lua_State *_pL); // takes 2 arguments
int lua_date_hour_span(lua_State *_pL); // takes 2 arguments
int lua_date_minute_span(lua_State *_pL); // takes 2 arguments
int lua_date_second_span(lua_State *_pL); // takes 2 arguments
int lua_date_compare_datetime(lua_State *_pL); // takes 2 arguments
int lua_date_compare_date(lua_State *_pL); // takes 2 arguments
int lua_date_compare_time(lua_State *_pL); // takes 2 arguments
int lua_date_date_of(lua_State *_pL); // takes 1 arguments
int lua_date_time_of(lua_State *_pL); // takes 1 arguments
int lua_date_datetime_string(lua_State *_pL); // takes 1 arguments
int lua_date_date_string(lua_State *_pL); // takes 1 arguments
int lua_date_time_string(lua_State *_pL); // takes 1 arguments
int lua_date_days_in_month(lua_State *_pL); // takes 1 arguments
int lua_date_days_in_year(lua_State *_pL); // takes 1 arguments
int lua_date_leap_year(lua_State *_pL); // takes 1 arguments
int lua_date_is_today(lua_State *_pL); // takes 1 arguments
int lua_date_set_timezone(lua_State *_pL); // takes 1 arguments
int lua_date_get_timezone(lua_State *_pL); // takes 0 arguments
int lua_game_set_speed(lua_State *_pL); // takes 2 arguments
int lua_game_get_speed(lua_State *_pL); // takes 2 arguments
int lua_ds_set_precision(lua_State *_pL); // takes 1 arguments
int lua_ds_exists(lua_State *_pL); // takes 2 arguments
int lua_ds_stack_create(lua_State *_pL); // takes 0 arguments
int lua_ds_stack_destroy(lua_State *_pL); // takes 1 arguments
int lua_ds_stack_clear(lua_State *_pL); // takes 1 arguments
int lua_ds_stack_copy(lua_State *_pL); // takes 2 arguments
int lua_ds_stack_size(lua_State *_pL); // takes 1 arguments
int lua_ds_stack_empty(lua_State *_pL); // takes 1 arguments
int lua_ds_stack_push(lua_State *_pL); // takes -1 arguments
int lua_ds_stack_pop(lua_State *_pL); // takes 1 arguments
int lua_ds_stack_top(lua_State *_pL); // takes 1 arguments
int lua_ds_stack_write(lua_State *_pL); // takes 1 arguments
int lua_ds_stack_read(lua_State *_pL); // takes 2 arguments
int lua_ds_queue_create(lua_State *_pL); // takes 0 arguments
int lua_ds_queue_destroy(lua_State *_pL); // takes 1 arguments
int lua_ds_queue_clear(lua_State *_pL); // takes 1 arguments
int lua_ds_queue_copy(lua_State *_pL); // takes 2 arguments
int lua_ds_queue_size(lua_State *_pL); // takes 1 arguments
int lua_ds_queue_empty(lua_State *_pL); // takes 1 arguments
int lua_ds_queue_enqueue(lua_State *_pL); // takes -1 arguments
int lua_ds_queue_dequeue(lua_State *_pL); // takes 1 arguments
int lua_ds_queue_head(lua_State *_pL); // takes 1 arguments
int lua_ds_queue_tail(lua_State *_pL); // takes 1 arguments
int lua_ds_queue_write(lua_State *_pL); // takes 1 arguments
int lua_ds_queue_read(lua_State *_pL); // takes 2 arguments
int lua_ds_list_create(lua_State *_pL); // takes 0 arguments
int lua_ds_list_destroy(lua_State *_pL); // takes 1 arguments
int lua_ds_list_clear(lua_State *_pL); // takes 1 arguments
int lua_ds_list_copy(lua_State *_pL); // takes 2 arguments
int lua_ds_list_size(lua_State *_pL); // takes 1 arguments
int lua_ds_list_empty(lua_State *_pL); // takes 1 arguments
int lua_ds_list_add(lua_State *_pL); // takes -1 arguments
int lua_ds_list_insert(lua_State *_pL); // takes 3 arguments
int lua_ds_list_replace(lua_State *_pL); // takes 3 arguments
int lua_ds_list_delete(lua_State *_pL); // takes 2 arguments
int lua_ds_list_find_index(lua_State *_pL); // takes 2 arguments
int lua_ds_list_find_value(lua_State *_pL); // takes 2 arguments
int lua_ds_list_mark_as_list(lua_State *_pL); // takes 2 arguments
int lua_ds_list_mark_as_map(lua_State *_pL); // takes 2 arguments
int lua_ds_list_sort(lua_State *_pL); // takes 2 arguments
int lua_ds_list_shuffle(lua_State *_pL); // takes 1 arguments
int lua_ds_list_write(lua_State *_pL); // takes 1 arguments
int lua_ds_list_read(lua_State *_pL); // takes 2 arguments
int lua_ds_list_set(lua_State *_pL); // takes 3 arguments
int lua_ds_list_set_post(lua_State *_pL); // takes 3 arguments
int lua_ds_list_set_pre(lua_State *_pL); // takes 3 arguments
int lua_ds_map_create(lua_State *_pL); // takes 0 arguments
int lua_ds_map_destroy(lua_State *_pL); // takes 1 arguments
int lua_ds_map_clear(lua_State *_pL); // takes 1 arguments
int lua_ds_map_copy(lua_State *_pL); // takes 2 arguments
int lua_ds_map_size(lua_State *_pL); // takes 1 arguments
int lua_ds_map_empty(lua_State *_pL); // takes 1 arguments
int lua_ds_map_add(lua_State *_pL); // takes 3 arguments
int lua_ds_map_set(lua_State *_pL); // takes 3 arguments
int lua_ds_map_set_pre(lua_State *_pL); // takes 3 arguments
int lua_ds_map_set_post(lua_State *_pL); // takes 3 arguments
int lua_ds_map_add_list(lua_State *_pL); // takes 3 arguments
int lua_ds_map_add_map(lua_State *_pL); // takes 3 arguments
int lua_ds_map_replace(lua_State *_pL); // takes 3 arguments
int lua_ds_map_replace_list(lua_State *_pL); // takes 3 arguments
int lua_ds_map_replace_map(lua_State *_pL); // takes 3 arguments
int lua_ds_map_delete(lua_State *_pL); // takes 2 arguments
int lua_ds_map_exists(lua_State *_pL); // takes 2 arguments
int lua_ds_map_find_value(lua_State *_pL); // takes 2 arguments
int lua_ds_map_find_previous(lua_State *_pL); // takes 2 arguments
int lua_ds_map_find_next(lua_State *_pL); // takes 2 arguments
int lua_ds_map_find_first(lua_State *_pL); // takes 1 arguments
int lua_ds_map_find_last(lua_State *_pL); // takes 1 arguments
int lua_ds_map_write(lua_State *_pL); // takes 1 arguments
int lua_ds_map_read(lua_State *_pL); // takes 2 arguments
int lua_ds_map_secure_save(lua_State *_pL); // takes 2 arguments
int lua_ds_map_secure_load(lua_State *_pL); // takes 1 arguments
int lua_ds_map_secure_load_buffer(lua_State *_pL); // takes 1 arguments
int lua_ds_map_secure_save_buffer(lua_State *_pL); // takes 2 arguments
int lua_ds_priority_create(lua_State *_pL); // takes 0 arguments
int lua_ds_priority_destroy(lua_State *_pL); // takes 1 arguments
int lua_ds_priority_clear(lua_State *_pL); // takes 1 arguments
int lua_ds_priority_copy(lua_State *_pL); // takes 2 arguments
int lua_ds_priority_size(lua_State *_pL); // takes 1 arguments
int lua_ds_priority_empty(lua_State *_pL); // takes 1 arguments
int lua_ds_priority_add(lua_State *_pL); // takes 3 arguments
int lua_ds_priority_change_priority(lua_State *_pL); // takes 3 arguments
int lua_ds_priority_find_priority(lua_State *_pL); // takes 2 arguments
int lua_ds_priority_delete_value(lua_State *_pL); // takes 2 arguments
int lua_ds_priority_delete_min(lua_State *_pL); // takes 1 arguments
int lua_ds_priority_find_min(lua_State *_pL); // takes 1 arguments
int lua_ds_priority_delete_max(lua_State *_pL); // takes 1 arguments
int lua_ds_priority_find_max(lua_State *_pL); // takes 1 arguments
int lua_ds_priority_write(lua_State *_pL); // takes 1 arguments
int lua_ds_priority_read(lua_State *_pL); // takes 2 arguments
int lua_ds_grid_create(lua_State *_pL); // takes 2 arguments
int lua_ds_grid_destroy(lua_State *_pL); // takes 1 arguments
int lua_ds_grid_copy(lua_State *_pL); // takes 2 arguments
int lua_ds_grid_resize(lua_State *_pL); // takes 3 arguments
int lua_ds_grid_width(lua_State *_pL); // takes 1 arguments
int lua_ds_grid_height(lua_State *_pL); // takes 1 arguments
int lua_ds_grid_clear(lua_State *_pL); // takes 2 arguments
int lua_ds_grid_set(lua_State *_pL); // takes 4 arguments
int lua_ds_grid_set_pre(lua_State *_pL); // takes 4 arguments
int lua_ds_grid_set_post(lua_State *_pL); // takes 4 arguments
int lua_ds_grid_add(lua_State *_pL); // takes 4 arguments
int lua_ds_grid_multiply(lua_State *_pL); // takes 4 arguments
int lua_ds_grid_set_region(lua_State *_pL); // takes 6 arguments
int lua_ds_grid_add_region(lua_State *_pL); // takes 6 arguments
int lua_ds_grid_multiply_region(lua_State *_pL); // takes 6 arguments
int lua_ds_grid_set_disk(lua_State *_pL); // takes 5 arguments
int lua_ds_grid_add_disk(lua_State *_pL); // takes 5 arguments
int lua_ds_grid_multiply_disk(lua_State *_pL); // takes 5 arguments
int lua_ds_grid_set_grid_region(lua_State *_pL); // takes 8 arguments
int lua_ds_grid_add_grid_region(lua_State *_pL); // takes 8 arguments
int lua_ds_grid_multiply_grid_region(lua_State *_pL); // takes 8 arguments
int lua_ds_grid_get(lua_State *_pL); // takes 3 arguments
int lua_ds_grid_get_sum(lua_State *_pL); // takes 5 arguments
int lua_ds_grid_get_max(lua_State *_pL); // takes 5 arguments
int lua_ds_grid_get_min(lua_State *_pL); // takes 5 arguments
int lua_ds_grid_get_mean(lua_State *_pL); // takes 5 arguments
int lua_ds_grid_get_disk_sum(lua_State *_pL); // takes 4 arguments
int lua_ds_grid_get_disk_max(lua_State *_pL); // takes 4 arguments
int lua_ds_grid_get_disk_min(lua_State *_pL); // takes 4 arguments
int lua_ds_grid_get_disk_mean(lua_State *_pL); // takes 4 arguments
int lua_ds_grid_value_exists(lua_State *_pL); // takes 6 arguments
int lua_ds_grid_value_x(lua_State *_pL); // takes 6 arguments
int lua_ds_grid_value_y(lua_State *_pL); // takes 6 arguments
int lua_ds_grid_value_disk_exists(lua_State *_pL); // takes 5 arguments
int lua_ds_grid_value_disk_x(lua_State *_pL); // takes 5 arguments
int lua_ds_grid_value_disk_y(lua_State *_pL); // takes 5 arguments
int lua_ds_grid_shuffle(lua_State *_pL); // takes 1 arguments
int lua_ds_grid_write(lua_State *_pL); // takes 1 arguments
int lua_ds_grid_read(lua_State *_pL); // takes 2 arguments
int lua_ds_grid_sort(lua_State *_pL); // takes 3 arguments
int lua_sound_play(lua_State *_pL); // takes 1 arguments
int lua_sound_loop(lua_State *_pL); // takes 1 arguments
int lua_sound_stop(lua_State *_pL); // takes 1 arguments
int lua_sound_stop_all(lua_State *_pL); // takes 0 arguments
int lua_sound_isplaying(lua_State *_pL); // takes 1 arguments
int lua_sound_volume(lua_State *_pL); // takes 2 arguments
int lua_sound_fade(lua_State *_pL); // takes 3 arguments
int lua_sound_pan(lua_State *_pL); // takes 2 arguments
int lua_sound_background_tempo(lua_State *_pL); // takes 1 arguments
int lua_sound_global_volume(lua_State *_pL); // takes 1 arguments
int lua_sound_set_search_directory(lua_State *_pL); // takes 1 arguments
int lua_sound_effect_set(lua_State *_pL); // takes 2 arguments
int lua_sound_effect_chorus(lua_State *_pL); // takes 8 arguments
int lua_sound_effect_compressor(lua_State *_pL); // takes 7 arguments
int lua_sound_effect_echo(lua_State *_pL); // takes 6 arguments
int lua_sound_effect_flanger(lua_State *_pL); // takes 8 arguments
int lua_sound_effect_gargle(lua_State *_pL); // takes 3 arguments
int lua_sound_effect_equalizer(lua_State *_pL); // takes 4 arguments
int lua_sound_effect_reverb(lua_State *_pL); // takes 5 arguments
int lua_sound_3d_set_sound_position(lua_State *_pL); // takes 4 arguments
int lua_sound_3d_set_sound_velocity(lua_State *_pL); // takes 4 arguments
int lua_sound_3d_set_sound_distance(lua_State *_pL); // takes 3 arguments
int lua_sound_3d_set_sound_cone(lua_State *_pL); // takes 7 arguments
int lua_cd_init(lua_State *_pL); // takes 0 arguments
int lua_cd_present(lua_State *_pL); // takes 0 arguments
int lua_cd_number(lua_State *_pL); // takes 0 arguments
int lua_cd_playing(lua_State *_pL); // takes 0 arguments
int lua_cd_paused(lua_State *_pL); // takes 0 arguments
int lua_cd_track(lua_State *_pL); // takes 0 arguments
int lua_cd_length(lua_State *_pL); // takes 0 arguments
int lua_cd_track_length(lua_State *_pL); // takes 1 arguments
int lua_cd_position(lua_State *_pL); // takes 0 arguments
int lua_cd_track_position(lua_State *_pL); // takes 0 arguments
int lua_cd_play(lua_State *_pL); // takes 2 arguments
int lua_cd_stop(lua_State *_pL); // takes 0 arguments
int lua_cd_pause(lua_State *_pL); // takes 0 arguments
int lua_cd_resume(lua_State *_pL); // takes 0 arguments
int lua_cd_set_position(lua_State *_pL); // takes 1 arguments
int lua_cd_set_track_position(lua_State *_pL); // takes 1 arguments
int lua_cd_open_door(lua_State *_pL); // takes 0 arguments
int lua_cd_close_door(lua_State *_pL); // takes 0 arguments
int lua_MCI_command(lua_State *_pL); // takes 1 arguments
int lua_audio_listener_position(lua_State *_pL); // takes 3 arguments
int lua_audio_listener_velocity(lua_State *_pL); // takes 3 arguments
int lua_audio_listener_orientation(lua_State *_pL); // takes 6 arguments
int lua_audio_emitter_position(lua_State *_pL); // takes 4 arguments
int lua_audio_emitter_velocity(lua_State *_pL); // takes 4 arguments
int lua_audio_system(lua_State *_pL); // takes 0 arguments
int lua_audio_emitter_create(lua_State *_pL); // takes 0 arguments
int lua_audio_emitter_free(lua_State *_pL); // takes 1 arguments
int lua_audio_play_sound(lua_State *_pL); // takes 3 arguments
int lua_audio_play_sound_on(lua_State *_pL); // takes 4 arguments
int lua_audio_play_sound_at(lua_State *_pL); // takes 9 arguments
int lua_audio_falloff_set_model(lua_State *_pL); // takes 1 arguments
int lua_audio_stop_sound(lua_State *_pL); // takes 1 arguments
int lua_audio_pause_sound(lua_State *_pL); // takes 1 arguments
int lua_audio_resume_sound(lua_State *_pL); // takes 1 arguments
int lua_audio_pause_all(lua_State *_pL); // takes 0 arguments
int lua_audio_resume_all(lua_State *_pL); // takes 0 arguments
int lua_audio_is_playing(lua_State *_pL); // takes 1 arguments
int lua_audio_is_paused(lua_State *_pL); // takes 1 arguments
int lua_audio_exists(lua_State *_pL); // takes 1 arguments
int lua_audio_system_is_available(lua_State *_pL); // takes 0 arguments
int lua_audio_master_gain(lua_State *_pL); // takes 1 arguments
int lua_audio_emitter_exists(lua_State *_pL); // takes 1 arguments
int lua_audio_get_type(lua_State *_pL); // takes 1 arguments
int lua_audio_emitter_gain(lua_State *_pL); // takes 2 arguments
int lua_audio_emitter_pitch(lua_State *_pL); // takes 2 arguments
int lua_audio_emitter_falloff(lua_State *_pL); // takes 4 arguments
int lua_audio_channel_num(lua_State *_pL); // takes 1 arguments
int lua_audio_play_music(lua_State *_pL); // takes 2 arguments
int lua_audio_stop_music(lua_State *_pL); // takes 0 arguments
int lua_audio_pause_music(lua_State *_pL); // takes 0 arguments
int lua_audio_resume_music(lua_State *_pL); // takes 0 arguments
int lua_audio_music_is_playing(lua_State *_pL); // takes 0 arguments
int lua_audio_music_gain(lua_State *_pL); // takes 2 arguments
int lua_audio_sound_gain(lua_State *_pL); // takes 3 arguments
int lua_audio_sound_pitch(lua_State *_pL); // takes 2 arguments
int lua_audio_stop_all(lua_State *_pL); // takes 0 arguments
int lua_audio_sound_length(lua_State *_pL); // takes 1 arguments
int lua_audio_emitter_get_gain(lua_State *_pL); // takes 1 arguments
int lua_audio_emitter_get_pitch(lua_State *_pL); // takes 1 arguments
int lua_audio_emitter_get_x(lua_State *_pL); // takes 1 arguments
int lua_audio_emitter_get_y(lua_State *_pL); // takes 1 arguments
int lua_audio_emitter_get_z(lua_State *_pL); // takes 1 arguments
int lua_audio_emitter_get_vx(lua_State *_pL); // takes 1 arguments
int lua_audio_emitter_get_vy(lua_State *_pL); // takes 1 arguments
int lua_audio_emitter_get_vz(lua_State *_pL); // takes 1 arguments
int lua_audio_listener_set_position(lua_State *_pL); // takes 4 arguments
int lua_audio_listener_set_velocity(lua_State *_pL); // takes 4 arguments
int lua_audio_listener_set_orientation(lua_State *_pL); // takes 7 arguments
int lua_audio_listener_get_data(lua_State *_pL); // takes 1 arguments
int lua_audio_set_master_gain(lua_State *_pL); // takes 2 arguments
int lua_audio_get_master_gain(lua_State *_pL); // takes 1 arguments
int lua_audio_sound_get_gain(lua_State *_pL); // takes 1 arguments
int lua_audio_sound_get_pitch(lua_State *_pL); // takes 1 arguments
int lua_audio_get_name(lua_State *_pL); // takes 1 arguments
int lua_audio_sound_set_track_position(lua_State *_pL); // takes 2 arguments
int lua_audio_sound_get_track_position(lua_State *_pL); // takes 1 arguments
int lua_audio_group_load(lua_State *_pL); // takes 1 arguments
int lua_audio_group_unload(lua_State *_pL); // takes 1 arguments
int lua_audio_group_is_loaded(lua_State *_pL); // takes 1 arguments
int lua_audio_group_load_progress(lua_State *_pL); // takes 1 arguments
int lua_audio_group_name(lua_State *_pL); // takes 1 arguments
int lua_audio_group_stop_all(lua_State *_pL); // takes 1 arguments
int lua_audio_group_set_gain(lua_State *_pL); // takes 3 arguments
int lua_audio_create_buffer_sound(lua_State *_pL); // takes 6 arguments
int lua_audio_free_buffer_sound(lua_State *_pL); // takes 1 arguments
int lua_audio_create_play_queue(lua_State *_pL); // takes 3 arguments
int lua_audio_free_play_queue(lua_State *_pL); // takes 0 arguments
int lua_audio_queue_sound(lua_State *_pL); // takes 4 arguments
int lua_audio_start_recording(lua_State *_pL); // takes 1 arguments
int lua_audio_stop_recording(lua_State *_pL); // takes 1 arguments
int lua_audio_get_recorder_count(lua_State *_pL); // takes 0 arguments
int lua_audio_get_recorder_info(lua_State *_pL); // takes 1 arguments
int lua_audio_sound_get_listener_mask(lua_State *_pL); // takes 1 arguments
int lua_audio_sound_set_listener_mask(lua_State *_pL); // takes 2 arguments
int lua_audio_emitter_get_listener_mask(lua_State *_pL); // takes 1 arguments
int lua_audio_emitter_set_listener_mask(lua_State *_pL); // takes 2 arguments
int lua_audio_get_listener_mask(lua_State *_pL); // takes 0 arguments
int lua_audio_set_listener_mask(lua_State *_pL); // takes 1 arguments
int lua_audio_get_listener_info(lua_State *_pL); // takes 0 arguments
int lua_audio_get_listener_count(lua_State *_pL); // takes 0 arguments
int lua_audio_create_sync_group(lua_State *_pL); // takes 1 arguments
int lua_audio_destroy_sync_group(lua_State *_pL); // takes 1 arguments
int lua_audio_play_in_sync_group(lua_State *_pL); // takes 4 arguments
int lua_audio_start_sync_group(lua_State *_pL); // takes 1 arguments
int lua_audio_pause_sync_group(lua_State *_pL); // takes 1 arguments
int lua_audio_resume_sync_group(lua_State *_pL); // takes 1 arguments
int lua_audio_stop_sync_group(lua_State *_pL); // takes 1 arguments
int lua_audio_sync_group_get_track_pos(lua_State *_pL); // takes 1 arguments
int lua_audio_sync_group_debug(lua_State *_pL); // takes 1 arguments
int lua_audio_sync_group_is_playing(lua_State *_pL); // takes 1 arguments
int lua_audio_create_stream(lua_State *_pL); // takes 1 arguments
int lua_audio_destroy_stream(lua_State *_pL); // takes 1 arguments
int lua_audio_debug(lua_State *_pL); // takes 1 arguments
int lua_physics_world_create(lua_State *_pL); // takes 1 arguments
int lua_physics_world_gravity(lua_State *_pL); // takes 2 arguments
int lua_physics_world_update_speed(lua_State *_pL); // takes 1 arguments
int lua_physics_world_update_iterations(lua_State *_pL); // takes 1 arguments
int lua_physics_world_draw_debug(lua_State *_pL); // takes 1 arguments
int lua_physics_pause_enable(lua_State *_pL); // takes 1 arguments
int lua_physics_fixture_create(lua_State *_pL); // takes 0 arguments
int lua_physics_fixture_set_kinematic(lua_State *_pL); // takes 1 arguments
int lua_physics_fixture_set_awake(lua_State *_pL); // takes 2 arguments
int lua_physics_fixture_set_density(lua_State *_pL); // takes 2 arguments
int lua_physics_fixture_set_restitution(lua_State *_pL); // takes 2 arguments
int lua_physics_fixture_set_friction(lua_State *_pL); // takes 2 arguments
int lua_physics_fixture_set_collision_group(lua_State *_pL); // takes 2 arguments
int lua_physics_fixture_set_sensor(lua_State *_pL); // takes 2 arguments
int lua_physics_fixture_set_linear_damping(lua_State *_pL); // takes 2 arguments
int lua_physics_fixture_set_angular_damping(lua_State *_pL); // takes 2 arguments
int lua_physics_fixture_set_circle_shape(lua_State *_pL); // takes 2 arguments
int lua_physics_fixture_set_box_shape(lua_State *_pL); // takes 3 arguments
int lua_physics_fixture_set_edge_shape(lua_State *_pL); // takes 5 arguments
int lua_physics_fixture_set_polygon_shape(lua_State *_pL); // takes 1 arguments
int lua_physics_fixture_set_chain_shape(lua_State *_pL); // takes 2 arguments
int lua_physics_fixture_add_point(lua_State *_pL); // takes 3 arguments
int lua_physics_fixture_bind(lua_State *_pL); // takes 2 arguments
int lua_physics_fixture_bind_ext(lua_State *_pL); // takes 4 arguments
int lua_physics_fixture_delete(lua_State *_pL); // takes 1 arguments
int lua_physics_apply_force(lua_State *_pL); // takes 4 arguments
int lua_physics_apply_impulse(lua_State *_pL); // takes 4 arguments
int lua_physics_apply_angular_impulse(lua_State *_pL); // takes 1 arguments
int lua_physics_apply_local_force(lua_State *_pL); // takes 4 arguments
int lua_physics_apply_local_impulse(lua_State *_pL); // takes 4 arguments
int lua_physics_apply_torque(lua_State *_pL); // takes 1 arguments
int lua_physics_mass_properties(lua_State *_pL); // takes 4 arguments
int lua_physics_draw_debug(lua_State *_pL); // takes 0 arguments
int lua_physics_test_overlap(lua_State *_pL); // takes 4 arguments
int lua_physics_remove_fixture(lua_State *_pL); // takes 2 arguments
int lua_physics_get_friction(lua_State *_pL); // takes 1 arguments
int lua_physics_get_density(lua_State *_pL); // takes 1 arguments
int lua_physics_get_restitution(lua_State *_pL); // takes 1 arguments
int lua_physics_set_friction(lua_State *_pL); // takes 2 arguments
int lua_physics_set_density(lua_State *_pL); // takes 2 arguments
int lua_physics_set_restitution(lua_State *_pL); // takes 2 arguments
int lua_physics_joint_distance_create(lua_State *_pL); // takes 7 arguments
int lua_physics_joint_rope_create(lua_State *_pL); // takes 8 arguments
int lua_physics_joint_revolute_create(lua_State *_pL); // takes 11 arguments
int lua_physics_joint_prismatic_create(lua_State *_pL); // takes 13 arguments
int lua_physics_joint_pulley_create(lua_State *_pL); // takes 12 arguments
int lua_physics_joint_wheel_create(lua_State *_pL); // takes 12 arguments
int lua_physics_joint_gear_create(lua_State *_pL); // takes 5 arguments
int lua_physics_joint_weld_create(lua_State *_pL); // takes 8 arguments
int lua_physics_joint_friction_create(lua_State *_pL); // takes 7 arguments
int lua_physics_joint_enable_motor(lua_State *_pL); // takes 2 arguments
int lua_physics_joint_get_value(lua_State *_pL); // takes 2 arguments
int lua_physics_joint_set_value(lua_State *_pL); // takes 3 arguments
int lua_physics_joint_delete(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_create(lua_State *_pL); // takes 8 arguments
int lua_physics_particle_delete(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_delete_region_circle(lua_State *_pL); // takes 3 arguments
int lua_physics_particle_delete_region_box(lua_State *_pL); // takes 4 arguments
int lua_physics_particle_delete_region_poly(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_set_flags(lua_State *_pL); // takes 2 arguments
int lua_physics_particle_set_category_flags(lua_State *_pL); // takes 2 arguments
int lua_physics_particle_draw(lua_State *_pL); // takes 4 arguments
int lua_physics_particle_draw_ext(lua_State *_pL); // takes 9 arguments
int lua_physics_particle_count(lua_State *_pL); // takes 0 arguments
int lua_physics_particle_get_data(lua_State *_pL); // takes 2 arguments
int lua_physics_particle_get_data_particle(lua_State *_pL); // takes 2 arguments
int lua_physics_particle_group_begin(lua_State *_pL); // takes 12 arguments
int lua_physics_particle_group_circle(lua_State *_pL); // takes 2 arguments
int lua_physics_particle_group_box(lua_State *_pL); // takes 3 arguments
int lua_physics_particle_group_polygon(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_group_add_point(lua_State *_pL); // takes 3 arguments
int lua_physics_particle_group_end(lua_State *_pL); // takes 0 arguments
int lua_physics_particle_group_join(lua_State *_pL); // takes 2 arguments
int lua_physics_particle_group_delete(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_group_count(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_group_get_data(lua_State *_pL); // takes 3 arguments
int lua_physics_particle_group_get_mass(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_group_get_inertia(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_group_get_centre_x(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_group_get_centre_y(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_group_get_vel_x(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_group_get_vel_y(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_group_get_ang_vel(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_group_get_x(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_group_get_y(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_group_get_angle(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_set_group_flags(lua_State *_pL); // takes 2 arguments
int lua_physics_particle_get_group_flags(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_get_max_count(lua_State *_pL); // takes 0 arguments
int lua_physics_particle_get_radius(lua_State *_pL); // takes 0 arguments
int lua_physics_particle_get_density(lua_State *_pL); // takes 0 arguments
int lua_physics_particle_get_damping(lua_State *_pL); // takes 0 arguments
int lua_physics_particle_get_gravity_scale(lua_State *_pL); // takes 0 arguments
int lua_physics_particle_set_max_count(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_set_radius(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_set_density(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_set_damping(lua_State *_pL); // takes 1 arguments
int lua_physics_particle_set_gravity_scale(lua_State *_pL); // takes 1 arguments
int lua_gamepad_is_supported(lua_State *_pL); // takes 0 arguments
int lua_gamepad_get_device_count(lua_State *_pL); // takes 0 arguments
int lua_gamepad_is_connected(lua_State *_pL); // takes 1 arguments
int lua_gamepad_get_description(lua_State *_pL); // takes 1 arguments
int lua_gamepad_get_button_threshold(lua_State *_pL); // takes 1 arguments
int lua_gamepad_set_button_threshold(lua_State *_pL); // takes 2 arguments
int lua_gamepad_get_axis_deadzone(lua_State *_pL); // takes 1 arguments
int lua_gamepad_set_axis_deadzone(lua_State *_pL); // takes 2 arguments
int lua_gamepad_button_count(lua_State *_pL); // takes 1 arguments
int lua_gamepad_button_check(lua_State *_pL); // takes 2 arguments
int lua_gamepad_button_check_pressed(lua_State *_pL); // takes 2 arguments
int lua_gamepad_button_check_released(lua_State *_pL); // takes 2 arguments
int lua_gamepad_button_value(lua_State *_pL); // takes 2 arguments
int lua_gamepad_axis_count(lua_State *_pL); // takes 1 arguments
int lua_gamepad_axis_value(lua_State *_pL); // takes 2 arguments
int lua_gamepad_hat_value(lua_State *_pL); // takes 2 arguments
int lua_gamepad_hat_count(lua_State *_pL); // takes 1 arguments
int lua_gamepad_remove_mapping(lua_State *_pL); // takes 1 arguments
int lua_gamepad_test_mapping(lua_State *_pL); // takes 2 arguments
int lua_gamepad_get_mapping(lua_State *_pL); // takes 1 arguments
int lua_gamepad_get_guid(lua_State *_pL); // takes 1 arguments
int lua_gamepad_set_vibration(lua_State *_pL); // takes 3 arguments
int lua_gamepad_add_hardware_mapping_from_string(lua_State *_pL); // takes 1 arguments
int lua_gamepad_add_hardware_mapping_from_file(lua_State *_pL); // takes 1 arguments
int lua_gamepad_get_hardware_mappings(lua_State *_pL); // takes 0 arguments
int lua_gamepad_set_color(lua_State *_pL); // takes 2 arguments
int lua_gamepad_set_colour(lua_State *_pL); // takes 2 arguments
int lua_buffer_create(lua_State *_pL); // takes 3 arguments
int lua_buffer_delete(lua_State *_pL); // takes 1 arguments
int lua_buffer_write(lua_State *_pL); // takes 3 arguments
int lua_buffer_read(lua_State *_pL); // takes 2 arguments
int lua_buffer_poke(lua_State *_pL); // takes 4 arguments
int lua_buffer_peek(lua_State *_pL); // takes 3 arguments
int lua_buffer_seek(lua_State *_pL); // takes 3 arguments
int lua_buffer_save(lua_State *_pL); // takes 2 arguments
int lua_buffer_save_ext(lua_State *_pL); // takes 4 arguments
int lua_buffer_load(lua_State *_pL); // takes 1 arguments
int lua_buffer_load_ext(lua_State *_pL); // takes 3 arguments
int lua_buffer_load_partial(lua_State *_pL); // takes 5 arguments
int lua_buffer_save_async(lua_State *_pL); // takes 4 arguments
int lua_buffer_load_async(lua_State *_pL); // takes 4 arguments
int lua_buffer_async_group_begin(lua_State *_pL); // takes 1 arguments
int lua_buffer_async_group_end(lua_State *_pL); // takes 0 arguments
int lua_buffer_async_group_option(lua_State *_pL); // takes 2 arguments
int lua_buffer_copy(lua_State *_pL); // takes 5 arguments
int lua_buffer_exists(lua_State *_pL); // takes 1 arguments
int lua_buffer_get_type(lua_State *_pL); // takes 1 arguments
int lua_buffer_get_alignment(lua_State *_pL); // takes 1 arguments
int lua_buffer_fill(lua_State *_pL); // takes 5 arguments
int lua_buffer_get_size(lua_State *_pL); // takes 1 arguments
int lua_buffer_tell(lua_State *_pL); // takes 1 arguments
int lua_buffer_resize(lua_State *_pL); // takes 2 arguments
int lua_buffer_md5(lua_State *_pL); // takes 3 arguments
int lua_buffer_sha1(lua_State *_pL); // takes 3 arguments
int lua_buffer_base64_encode(lua_State *_pL); // takes 3 arguments
int lua_buffer_base64_decode(lua_State *_pL); // takes 1 arguments
int lua_buffer_base64_decode_ext(lua_State *_pL); // takes 3 arguments
int lua_buffer_sizeof(lua_State *_pL); // takes 1 arguments
int lua_buffer_get_address(lua_State *_pL); // takes 1 arguments
int lua_buffer_get_surface(lua_State *_pL); // takes 5 arguments
int lua_buffer_set_surface(lua_State *_pL); // takes 5 arguments
int lua_buffer_create_from_vertex_buffer(lua_State *_pL); // takes 3 arguments
int lua_buffer_create_from_vertex_buffer_ext(lua_State *_pL); // takes 5 arguments
int lua_buffer_copy_from_vertex_buffer(lua_State *_pL); // takes 5 arguments
int lua_buffer_compress(lua_State *_pL); // takes 3 arguments
int lua_buffer_decompress(lua_State *_pL); // takes 1 arguments
int lua_vertex_create_buffer(lua_State *_pL); // takes 0 arguments
int lua_vertex_create_buffer_ext(lua_State *_pL); // takes 1 arguments
int lua_vertex_delete_buffer(lua_State *_pL); // takes 1 arguments
int lua_vertex_begin(lua_State *_pL); // takes 2 arguments
int lua_vertex_end(lua_State *_pL); // takes 1 arguments
int lua_vertex_position(lua_State *_pL); // takes 3 arguments
int lua_vertex_position_3d(lua_State *_pL); // takes 4 arguments
int lua_vertex_colour(lua_State *_pL); // takes 3 arguments
int lua_vertex_color(lua_State *_pL); // takes 3 arguments
int lua_vertex_argb(lua_State *_pL); // takes 2 arguments
int lua_vertex_texcoord(lua_State *_pL); // takes 3 arguments
int lua_vertex_normal(lua_State *_pL); // takes 4 arguments
int lua_vertex_float1(lua_State *_pL); // takes 2 arguments
int lua_vertex_float2(lua_State *_pL); // takes 3 arguments
int lua_vertex_float3(lua_State *_pL); // takes 4 arguments
int lua_vertex_float4(lua_State *_pL); // takes 5 arguments
int lua_vertex_ubyte4(lua_State *_pL); // takes 5 arguments
int lua_vertex_submit(lua_State *_pL); // takes 3 arguments
int lua_vertex_freeze(lua_State *_pL); // takes 1 arguments
int lua_vertex_get_number(lua_State *_pL); // takes 1 arguments
int lua_vertex_get_buffer_size(lua_State *_pL); // takes 1 arguments
int lua_vertex_create_buffer_from_buffer(lua_State *_pL); // takes 2 arguments
int lua_vertex_create_buffer_from_buffer_ext(lua_State *_pL); // takes 4 arguments
int lua_network_create_socket(lua_State *_pL); // takes 1 arguments
int lua_network_create_socket_ext(lua_State *_pL); // takes 2 arguments
int lua_network_create_server(lua_State *_pL); // takes 3 arguments
int lua_network_create_server_raw(lua_State *_pL); // takes 3 arguments
int lua_network_connect(lua_State *_pL); // takes 3 arguments
int lua_network_connect_raw(lua_State *_pL); // takes 3 arguments
int lua_network_send_packet(lua_State *_pL); // takes 3 arguments
int lua_network_send_raw(lua_State *_pL); // takes 3 arguments
int lua_network_send_broadcast(lua_State *_pL); // takes 3 arguments
int lua_network_send_udp(lua_State *_pL); // takes 5 arguments
int lua_network_send_udp_raw(lua_State *_pL); // takes 5 arguments
int lua_network_resolve(lua_State *_pL); // takes 1 arguments
int lua_network_destroy(lua_State *_pL); // takes 1 arguments
int lua_network_set_timeout(lua_State *_pL); // takes 3 arguments
int lua_network_set_config(lua_State *_pL); // takes 2 arguments
int lua_shader_set(lua_State *_pL); // takes 1 arguments
int lua_shader_get_name(lua_State *_pL); // takes 1 arguments
int lua_shader_reset(lua_State *_pL); // takes 1 arguments
int lua_shader_current(lua_State *_pL); // takes 0 arguments
int lua_shader_get_uniform(lua_State *_pL); // takes 2 arguments
int lua_shader_get_sampler_index(lua_State *_pL); // takes 2 arguments
int lua_shader_set_uniform_i(lua_State *_pL); // takes -1 arguments
int lua_shader_set_uniform_i_array(lua_State *_pL); // takes 2 arguments
int lua_shader_set_uniform_f(lua_State *_pL); // takes -1 arguments
int lua_shader_set_uniform_f_array(lua_State *_pL); // takes 2 arguments
int lua_shader_set_uniform_matrix(lua_State *_pL); // takes 1 arguments
int lua_shader_set_uniform_matrix_array(lua_State *_pL); // takes 2 arguments
int lua_shader_is_compiled(lua_State *_pL); // takes 1 arguments
int lua_shaders_are_supported(lua_State *_pL); // takes 0 arguments
int lua_texture_set_stage(lua_State *_pL); // takes 2 arguments
int lua_texture_get_texel_width(lua_State *_pL); // takes 1 arguments
int lua_texture_get_texel_height(lua_State *_pL); // takes 1 arguments
int lua_vertex_format_begin(lua_State *_pL); // takes 0 arguments
int lua_vertex_format_delete(lua_State *_pL); // takes 1 arguments
int lua_vertex_format_end(lua_State *_pL); // takes 0 arguments
int lua_vertex_format_add_position(lua_State *_pL); // takes 0 arguments
int lua_vertex_format_add_position_3d(lua_State *_pL); // takes 0 arguments
int lua_vertex_format_add_colour(lua_State *_pL); // takes 0 arguments
int lua_vertex_format_add_color(lua_State *_pL); // takes 0 arguments
int lua_vertex_format_add_normal(lua_State *_pL); // takes 0 arguments
int lua_vertex_format_add_textcoord(lua_State *_pL); // takes 0 arguments
int lua_vertex_format_add_texcoord(lua_State *_pL); // takes 0 arguments
int lua_vertex_format_add_custom(lua_State *_pL); // takes 2 arguments
int lua_steam_activate_overlay(lua_State *_pL); // takes 1 arguments
int lua_steam_is_overlay_enabled(lua_State *_pL); // takes 0 arguments
int lua_steam_is_overlay_activated(lua_State *_pL); // takes 0 arguments
int lua_steam_get_persona_name(lua_State *_pL); // takes 0 arguments
int lua_steam_initialised(lua_State *_pL); // takes 0 arguments
int lua_steam_is_cloud_enabled_for_app(lua_State *_pL); // takes 0 arguments
int lua_steam_is_cloud_enabled_for_account(lua_State *_pL); // takes 0 arguments
int lua_steam_file_persisted(lua_State *_pL); // takes 1 arguments
int lua_steam_get_quota_total(lua_State *_pL); // takes 0 arguments
int lua_steam_get_quota_free(lua_State *_pL); // takes 0 arguments
int lua_steam_file_write(lua_State *_pL); // takes 3 arguments
int lua_steam_file_write_file(lua_State *_pL); // takes 2 arguments
int lua_steam_file_read(lua_State *_pL); // takes 1 arguments
int lua_steam_file_delete(lua_State *_pL); // takes 1 arguments
int lua_steam_file_exists(lua_State *_pL); // takes 1 arguments
int lua_steam_file_size(lua_State *_pL); // takes 1 arguments
int lua_steam_file_share(lua_State *_pL); // takes 1 arguments
int lua_steam_publish_workshop_file(lua_State *_pL); // takes 4 arguments
int lua_steam_is_screenshot_requested(lua_State *_pL); // takes 0 arguments
int lua_steam_send_screenshot(lua_State *_pL); // takes 3 arguments
int lua_steam_is_user_logged_on(lua_State *_pL); // takes 0 arguments
int lua_steam_get_user_steam_id(lua_State *_pL); // takes 0 arguments
int lua_steam_user_owns_dlc(lua_State *_pL); // takes 1 arguments
int lua_steam_user_installed_dlc(lua_State *_pL); // takes 1 arguments
int lua_steam_current_game_language(lua_State *_pL); // takes 1 arguments
int lua_steam_available_languages(lua_State *_pL); // takes 1 arguments
int lua_steam_activate_overlay_browser(lua_State *_pL); // takes 1 arguments
int lua_steam_activate_overlay_user(lua_State *_pL); // takes 2 arguments
int lua_steam_activate_overlay_store(lua_State *_pL); // takes 1 arguments
int lua_steam_get_user_persona_name(lua_State *_pL); // takes 1 arguments
int lua_steam_set_achievement(lua_State *_pL); // takes 1 arguments
int lua_steam_get_achievement(lua_State *_pL); // takes 1 arguments
int lua_steam_clear_achievement(lua_State *_pL); // takes 1 arguments
int lua_steam_set_stat_int(lua_State *_pL); // takes 2 arguments
int lua_steam_set_stat_float(lua_State *_pL); // takes 2 arguments
int lua_steam_set_stat_avg_rate(lua_State *_pL); // takes 3 arguments
int lua_steam_get_stat_int(lua_State *_pL); // takes 1 arguments
int lua_steam_get_stat_float(lua_State *_pL); // takes 1 arguments
int lua_steam_get_stat_avg_rate(lua_State *_pL); // takes 1 arguments
int lua_steam_reset_all_stats(lua_State *_pL); // takes 0 arguments
int lua_steam_reset_all_stats_achievements(lua_State *_pL); // takes 0 arguments
int lua_steam_stats_ready(lua_State *_pL); // takes 0 arguments
int lua_steam_create_leaderboard(lua_State *_pL); // takes 3 arguments
int lua_steam_upload_score(lua_State *_pL); // takes 2 arguments
int lua_steam_download_scores_around_user(lua_State *_pL); // takes 3 arguments
int lua_steam_download_scores(lua_State *_pL); // takes 3 arguments
int lua_steam_download_friends_scores(lua_State *_pL); // takes 1 arguments
int lua_steam_upload_score_buffer(lua_State *_pL); // takes 3 arguments
int lua_steam_upload_score_ext(lua_State *_pL); // takes 3 arguments
int lua_steam_upload_score_buffer_ext(lua_State *_pL); // takes 4 arguments
int lua_steam_get_app_id(lua_State *_pL); // takes 0 arguments
int lua_steam_get_user_account_id(lua_State *_pL); // takes 0 arguments
int lua_steam_ugc_download(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_create_item(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_start_item_update(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_set_item_title(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_set_item_description(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_set_item_visibility(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_set_item_tags(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_set_item_content(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_set_item_preview(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_submit_item_update(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_get_item_update_progress(lua_State *_pL); // takes 1 arguments
int lua_steam_ugc_subscribe_item(lua_State *_pL); // takes 1 arguments
int lua_steam_ugc_unsubscribe_item(lua_State *_pL); // takes 1 arguments
int lua_steam_ugc_num_subscribed_items(lua_State *_pL); // takes 0 arguments
int lua_steam_ugc_get_subscribed_items(lua_State *_pL); // takes 1 arguments
int lua_steam_ugc_get_item_install_info(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_get_item_update_info(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_request_item_details(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_create_query_user(lua_State *_pL); // takes 4 arguments
int lua_steam_ugc_create_query_user_ex(lua_State *_pL); // takes 7 arguments
int lua_steam_ugc_create_query_all(lua_State *_pL); // takes 3 arguments
int lua_steam_ugc_create_query_all_ex(lua_State *_pL); // takes 5 arguments
int lua_steam_ugc_query_set_cloud_filename_filter(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_query_set_match_any_tag(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_query_set_search_text(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_query_set_ranked_by_trend_days(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_query_add_required_tag(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_query_add_excluded_tag(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_query_set_return_long_description(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_query_set_return_total_only(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_query_set_allow_cached_response(lua_State *_pL); // takes 2 arguments
int lua_steam_ugc_send_query(lua_State *_pL); // takes 1 arguments
int lua_push_local_notification(lua_State *_pL); // takes 4 arguments
int lua_push_get_first_local_notification(lua_State *_pL); // takes 1 arguments
int lua_push_get_next_local_notification(lua_State *_pL); // takes 1 arguments
int lua_push_cancel_local_notification(lua_State *_pL); // takes 1 arguments
int lua_push_get_application_badge_number(lua_State *_pL); // takes 0 arguments
int lua_push_set_application_badge_number(lua_State *_pL); // takes 1 arguments
int lua_iap_activate(lua_State *_pL); // takes 1 arguments
int lua_iap_status(lua_State *_pL); // takes 0 arguments
int lua_iap_acquire(lua_State *_pL); // takes 2 arguments
int lua_iap_consume(lua_State *_pL); // takes 1 arguments
int lua_iap_is_purchased(lua_State *_pL); // takes 1 arguments
int lua_iap_enumerate_products(lua_State *_pL); // takes 1 arguments
int lua_iap_restore_all(lua_State *_pL); // takes 0 arguments
int lua_iap_product_details(lua_State *_pL); // takes 2 arguments
int lua_iap_purchase_details(lua_State *_pL); // takes 2 arguments
int lua_iap_store_status(lua_State *_pL); // takes 0 arguments
int lua_iap_event_queue(lua_State *_pL); // takes 0 arguments
int lua_iap_product_status(lua_State *_pL); // takes 1 arguments
int lua_iap_is_downloaded(lua_State *_pL); // takes 1 arguments
int lua_iap_product_files(lua_State *_pL); // takes 2 arguments
int lua_iap_files_purchased(lua_State *_pL); // takes 0 arguments
int lua_YoYo_AddVirtualKey(lua_State *_pL); // takes 5 arguments
int lua_YoYo_DeleteVirtualKey(lua_State *_pL); // takes 1 arguments
int lua_YoYo_ShowVirtualKey(lua_State *_pL); // takes 1 arguments
int lua_YoYo_HideVirtualKey(lua_State *_pL); // takes 1 arguments
int lua_virtual_key_add(lua_State *_pL); // takes 5 arguments
int lua_virtual_key_delete(lua_State *_pL); // takes 1 arguments
int lua_virtual_key_show(lua_State *_pL); // takes 1 arguments
int lua_virtual_key_hide(lua_State *_pL); // takes 1 arguments
int lua_YoYo_LoginAchievements(lua_State *_pL); // takes 0 arguments
int lua_YoYo_LogoutAchievements(lua_State *_pL); // takes 0 arguments
int lua_YoYo_PostAchievement(lua_State *_pL); // takes 2 arguments
int lua_YoYo_PostScore(lua_State *_pL); // takes 2 arguments
int lua_YoYo_AchievementsAvailable(lua_State *_pL); // takes 0 arguments
int lua_achievement_available(lua_State *_pL); // takes 0 arguments
int lua_achievement_post_score(lua_State *_pL); // takes 2 arguments
int lua_achievement_post(lua_State *_pL); // takes 2 arguments
int lua_achievement_increment(lua_State *_pL); // takes 2 arguments
int lua_achievement_event(lua_State *_pL); // takes 1 arguments
int lua_achievement_login(lua_State *_pL); // takes 0 arguments
int lua_achievement_logout(lua_State *_pL); // takes 0 arguments
int lua_achievement_reset(lua_State *_pL); // takes 0 arguments
int lua_achievement_show_achievements(lua_State *_pL); // takes 0 arguments
int lua_achievement_show(lua_State *_pL); // takes 2 arguments
int lua_achievement_show_leaderboards(lua_State *_pL); // takes 0 arguments
int lua_achievement_load_friends(lua_State *_pL); // takes 0 arguments
int lua_achievement_load_leaderboard(lua_State *_pL); // takes 4 arguments
int lua_achievement_get_pic(lua_State *_pL); // takes 1 arguments
int lua_achievement_get_info(lua_State *_pL); // takes 1 arguments
int lua_achievement_load_progress(lua_State *_pL); // takes 0 arguments
int lua_achievement_send_challenge(lua_State *_pL); // takes 5 arguments
int lua_achievement_get_challenges(lua_State *_pL); // takes 0 arguments
int lua_achievement_show_challenge_notifications(lua_State *_pL); // takes 3 arguments
int lua_cloud_file_save(lua_State *_pL); // takes 2 arguments
int lua_cloud_string_save(lua_State *_pL); // takes 2 arguments
int lua_cloud_synchronise(lua_State *_pL); // takes 0 arguments
int lua_YoYo_OpenURL(lua_State *_pL); // takes 1 arguments
int lua_YoYo_OpenURL_ext(lua_State *_pL); // takes 2 arguments
int lua_YoYo_OpenURL_full(lua_State *_pL); // takes 3 arguments
int lua_url_open(lua_State *_pL); // takes 1 arguments
int lua_url_open_ext(lua_State *_pL); // takes 2 arguments
int lua_url_open_full(lua_State *_pL); // takes 3 arguments
int lua_url_get_domain(lua_State *_pL); // takes 1 arguments
int lua_YoYo_EnableAds(lua_State *_pL); // takes 5 arguments
int lua_YoYo_DisableAds(lua_State *_pL); // takes 0 arguments
int lua_YoYo_LeaveRating(lua_State *_pL); // takes 4 arguments
int lua_ads_enable(lua_State *_pL); // takes 3 arguments
int lua_ads_disable(lua_State *_pL); // takes 1 arguments
int lua_ads_event(lua_State *_pL); // takes 1 arguments
int lua_ads_event_preload(lua_State *_pL); // takes 1 arguments
int lua_ads_get_display_width(lua_State *_pL); // takes 1 arguments
int lua_ads_get_display_height(lua_State *_pL); // takes 1 arguments
int lua_ads_move(lua_State *_pL); // takes 3 arguments
int lua_ads_interstitial_available(lua_State *_pL); // takes 0 arguments
int lua_ads_interstitial_display(lua_State *_pL); // takes 0 arguments
int lua_ads_engagement_available(lua_State *_pL); // takes 1 arguments
int lua_ads_engagement_launch(lua_State *_pL); // takes 1 arguments
int lua_ads_engagement_active(lua_State *_pL); // takes 1 arguments
int lua_ads_setup(lua_State *_pL); // takes 2 arguments
int lua_ads_set_reward_callback(lua_State *_pL); // takes 1 arguments
int lua_clickable_add(lua_State *_pL); // takes 6 arguments
int lua_clickable_add_ext(lua_State *_pL); // takes 8 arguments
int lua_clickable_change(lua_State *_pL); // takes 4 arguments
int lua_clickable_change_ext(lua_State *_pL); // takes 5 arguments
int lua_clickable_delete(lua_State *_pL); // takes 1 arguments
int lua_clickable_exists(lua_State *_pL); // takes 1 arguments
int lua_clickable_set_style(lua_State *_pL); // takes 2 arguments
int lua_shop_leave_rating(lua_State *_pL); // takes 4 arguments
int lua_YoYo_GetTimer(lua_State *_pL); // takes 0 arguments
int lua_YoYo_GetPlatform(lua_State *_pL); // takes 0 arguments
int lua_YoYo_GetDevice(lua_State *_pL); // takes 0 arguments
int lua_YoYo_GetCPUDetails(lua_State *_pL); // takes 0 arguments
int lua_YoYo_GetConfig(lua_State *_pL); // takes 0 arguments
int lua_YoYo_GetSessionKey(lua_State *_pL); // takes 0 arguments
int lua_YoYo_CheckSecurity(lua_State *_pL); // takes 1 arguments
int lua_get_timer(lua_State *_pL); // takes 0 arguments
int lua_os_get_config(lua_State *_pL); // takes 0 arguments
int lua_os_get_info(lua_State *_pL); // takes 0 arguments
int lua_os_get_language(lua_State *_pL); // takes 0 arguments
int lua_os_get_region(lua_State *_pL); // takes 0 arguments
int lua_os_request_permission(lua_State *_pL); // takes 1 arguments
int lua_os_check_permission(lua_State *_pL); // takes 1 arguments
int lua_code_is_compiled(lua_State *_pL); // takes 0 arguments
int lua_display_get_dpi_x(lua_State *_pL); // takes 0 arguments
int lua_display_get_dpi_y(lua_State *_pL); // takes 0 arguments
int lua_display_set_gui_size(lua_State *_pL); // takes 2 arguments
int lua_display_get_gui_width(lua_State *_pL); // takes 0 arguments
int lua_display_get_gui_height(lua_State *_pL); // takes 0 arguments
int lua_display_set_gui_maximise(lua_State *_pL); // takes 2 arguments
int lua_display_set_gui_maximize(lua_State *_pL); // takes 2 arguments
int lua_YoYo_OF_StartDashboard(lua_State *_pL); // takes 0 arguments
int lua_YoYo_OF_AddAchievement(lua_State *_pL); // takes 2 arguments
int lua_YoYo_OF_AddLeaderboard(lua_State *_pL); // takes 3 arguments
int lua_YoYo_OF_SendChallenge(lua_State *_pL); // takes 3 arguments
int lua_YoYo_OF_SendInvite(lua_State *_pL); // takes 1 arguments
int lua_YoYo_OF_SendSocial(lua_State *_pL); // takes 3 arguments
int lua_YoYo_OF_SetURL(lua_State *_pL); // takes 1 arguments
int lua_YoYo_OF_AcceptChallenge(lua_State *_pL); // takes 0 arguments
int lua_YoYo_OF_IsOnline(lua_State *_pL); // takes 0 arguments
int lua_YoYo_OF_SendChallengeResult(lua_State *_pL); // takes 2 arguments
int lua_openfeint_start(lua_State *_pL); // takes 0 arguments
int lua_achievement_map_achievement(lua_State *_pL); // takes 2 arguments
int lua_achievement_map_leaderboard(lua_State *_pL); // takes 3 arguments
int lua_openfeint_send_challenge(lua_State *_pL); // takes 3 arguments
int lua_openfeint_send_invite(lua_State *_pL); // takes 1 arguments
int lua_openfeint_send_social(lua_State *_pL); // takes 3 arguments
int lua_openfeint_set_url(lua_State *_pL); // takes 1 arguments
int lua_openfeint_accept_challenge(lua_State *_pL); // takes 0 arguments
int lua_achievement_login_status(lua_State *_pL); // takes 0 arguments
int lua_openfeint_send_result(lua_State *_pL); // takes 2 arguments
int lua_YoYo_MouseCheckButton(lua_State *_pL); // takes 2 arguments
int lua_YoYo_MouseCheckButtonPressed(lua_State *_pL); // takes 2 arguments
int lua_YoYo_MouseCheckButtonReleased(lua_State *_pL); // takes 2 arguments
int lua_YoYo_MouseX(lua_State *_pL); // takes 1 arguments
int lua_YoYo_MouseY(lua_State *_pL); // takes 1 arguments
int lua_YoYo_MouseXRaw(lua_State *_pL); // takes 1 arguments
int lua_YoYo_MouseYRaw(lua_State *_pL); // takes 1 arguments
int lua_YoYo_GetTiltX(lua_State *_pL); // takes 0 arguments
int lua_YoYo_GetTiltY(lua_State *_pL); // takes 0 arguments
int lua_YoYo_GetTiltZ(lua_State *_pL); // takes 0 arguments
int lua_YoYo_IsKeypadOpen(lua_State *_pL); // takes 0 arguments
int lua_device_mouse_check_button(lua_State *_pL); // takes 2 arguments
int lua_device_mouse_check_button_pressed(lua_State *_pL); // takes 2 arguments
int lua_device_mouse_check_button_released(lua_State *_pL); // takes 2 arguments
int lua_device_mouse_x(lua_State *_pL); // takes 1 arguments
int lua_device_mouse_y(lua_State *_pL); // takes 1 arguments
int lua_device_mouse_raw_x(lua_State *_pL); // takes 1 arguments
int lua_device_mouse_raw_y(lua_State *_pL); // takes 1 arguments
int lua_device_mouse_x_to_gui(lua_State *_pL); // takes 1 arguments
int lua_device_mouse_y_to_gui(lua_State *_pL); // takes 1 arguments
int lua_device_get_tilt_x(lua_State *_pL); // takes 0 arguments
int lua_device_get_tilt_y(lua_State *_pL); // takes 0 arguments
int lua_device_get_tilt_z(lua_State *_pL); // takes 0 arguments
int lua_device_is_keypad_open(lua_State *_pL); // takes 0 arguments
int lua_facebook_init(lua_State *_pL); // takes 0 arguments
int lua_facebook_login(lua_State *_pL); // takes 2 arguments
int lua_facebook_status(lua_State *_pL); // takes 0 arguments
int lua_facebook_graph_request(lua_State *_pL); // takes 4 arguments
int lua_facebook_dialog(lua_State *_pL); // takes 3 arguments
int lua_facebook_logout(lua_State *_pL); // takes 0 arguments
int lua_facebook_user_id(lua_State *_pL); // takes 0 arguments
int lua_facebook_accesstoken(lua_State *_pL); // takes 0 arguments
int lua_facebook_launch_offerwall(lua_State *_pL); // takes 1 arguments
int lua_facebook_post_message(lua_State *_pL); // takes 7 arguments
int lua_facebook_send_invite(lua_State *_pL); // takes 5 arguments
int lua_facebook_check_permission(lua_State *_pL); // takes 1 arguments
int lua_facebook_request_read_permissions(lua_State *_pL); // takes 1 arguments
int lua_facebook_request_publish_permissions(lua_State *_pL); // takes 1 arguments
int lua_YoYo_OSPauseEvent(lua_State *_pL); // takes 0 arguments
int lua_os_is_paused(lua_State *_pL); // takes 0 arguments
int lua_window_has_focus(lua_State *_pL); // takes 0 arguments
int lua_base64_encode(lua_State *_pL); // takes 1 arguments
int lua_base64_decode(lua_State *_pL); // takes 1 arguments
int lua_md5_string_unicode(lua_State *_pL); // takes 1 arguments
int lua_md5_string_utf8(lua_State *_pL); // takes 1 arguments
int lua_md5_file(lua_State *_pL); // takes 1 arguments
int lua_sha1_string_unicode(lua_State *_pL); // takes 1 arguments
int lua_sha1_string_utf8(lua_State *_pL); // takes 1 arguments
int lua_sha1_file(lua_State *_pL); // takes 1 arguments
int lua_os_is_network_connected(lua_State *_pL); // takes 0 arguments
int lua_os_powersave_enable(lua_State *_pL); // takes 1 arguments
int lua_os_lock_orientation(lua_State *_pL); // takes 1 arguments
int lua_analytics_event(lua_State *_pL); // takes 1 arguments
int lua_analytics_event_ext(lua_State *_pL); // takes -1 arguments
int lua_winphone_license_trial_version(lua_State *_pL); // takes 0 arguments
int lua_winphone_tile_title(lua_State *_pL); // takes 1 arguments
int lua_winphone_tile_count(lua_State *_pL); // takes 1 arguments
int lua_winphone_tile_back_title(lua_State *_pL); // takes 1 arguments
int lua_winphone_tile_back_content(lua_State *_pL); // takes 1 arguments
int lua_winphone_tile_back_content_wide(lua_State *_pL); // takes 1 arguments
int lua_winphone_tile_front_image(lua_State *_pL); // takes 1 arguments
int lua_winphone_tile_front_image_small(lua_State *_pL); // takes 1 arguments
int lua_winphone_tile_front_image_wide(lua_State *_pL); // takes 1 arguments
int lua_winphone_tile_back_image(lua_State *_pL); // takes 1 arguments
int lua_winphone_tile_back_image_wide(lua_State *_pL); // takes 1 arguments
int lua_winphone_tile_background_color(lua_State *_pL); // takes 1 arguments
int lua_winphone_tile_background_colour(lua_State *_pL); // takes 1 arguments
int lua_winphone_tile_icon_image(lua_State *_pL); // takes 1 arguments
int lua_winphone_tile_small_icon_image(lua_State *_pL); // takes 1 arguments
int lua_winphone_tile_wide_content(lua_State *_pL); // takes 2 arguments
int lua_winphone_tile_cycle_images(lua_State *_pL); // takes -1 arguments
int lua_winphone_tile_small_background_image(lua_State *_pL); // takes 1 arguments
int lua_gml_release_mode(lua_State *_pL); // takes 1 arguments
int lua_application_surface_draw_enable(lua_State *_pL); // takes 1 arguments
int lua_application_get_position(lua_State *_pL); // takes 0 arguments
int lua_application_surface_enable(lua_State *_pL); // takes 1 arguments
int lua_application_surface_is_enabled(lua_State *_pL); // takes 0 arguments
int lua_yyg_player_run(lua_State *_pL); // takes 4 arguments
int lua_yyg_player_restarted(lua_State *_pL); // takes 0 arguments
int lua_yyg_player_launch_args(lua_State *_pL); // takes 0 arguments
int lua_extension_stubfunc_real(lua_State *_pL); // takes 0 arguments
int lua_extension_stubfunc_string(lua_State *_pL); // takes 0 arguments
int lua_ps4_share_screenshot_enable(lua_State *_pL); // takes 1 arguments
int lua_ps4_share_video_enable(lua_State *_pL); // takes 1 arguments
int lua_ps4_touchpad_mouse_enable(lua_State *_pL); // takes 1 arguments
int lua_xboxone_package_check_license(lua_State *_pL); // takes 1 arguments
int lua_xboxone_get_user_count(lua_State *_pL); // takes 0 arguments
int lua_xboxone_get_user(lua_State *_pL); // takes 1 arguments
int lua_xboxone_get_activating_user(lua_State *_pL); // takes 1 arguments
int lua_xboxone_user_is_active(lua_State *_pL); // takes 1 arguments
int lua_xboxone_user_is_guest(lua_State *_pL); // takes 1 arguments
int lua_xboxone_user_is_signed_in(lua_State *_pL); // takes 1 arguments
int lua_xboxone_user_is_remote(lua_State *_pL); // takes 1 arguments
int lua_xboxone_gamedisplayname_for_user(lua_State *_pL); // takes 1 arguments
int lua_xboxone_appdisplayname_for_user(lua_State *_pL); // takes 1 arguments
int lua_xboxone_user_id_for_user(lua_State *_pL); // takes 1 arguments
int lua_xboxone_agegroup_for_user(lua_State *_pL); // takes 1 arguments
int lua_xboxone_gamerscore_for_user(lua_State *_pL); // takes 1 arguments
int lua_xboxone_reputation_for_user(lua_State *_pL); // takes 1 arguments
int lua_xboxone_user_for_pad(lua_State *_pL); // takes 1 arguments
int lua_xboxone_pad_count_for_user(lua_State *_pL); // takes 1 arguments
int lua_xboxone_pad_for_user(lua_State *_pL); // takes 2 arguments
int lua_xboxone_sponsor_for_user(lua_State *_pL); // takes 2 arguments
int lua_xboxone_show_account_picker(lua_State *_pL); // takes 2 arguments
int lua_xboxone_sprite_add_from_gamerpicture(lua_State *_pL); // takes 4 arguments
int lua_xboxone_show_profile_card_for_user(lua_State *_pL); // takes 2 arguments
int lua_xboxone_generate_player_session_id(lua_State *_pL); // takes 0 arguments
int lua_xboxone_set_savedata_user(lua_State *_pL); // takes 1 arguments
int lua_xboxone_get_savedata_user(lua_State *_pL); // takes 0 arguments
int lua_xboxone_get_file_error(lua_State *_pL); // takes 0 arguments
int lua_xboxone_was_terminated(lua_State *_pL); // takes 0 arguments
int lua_xboxone_is_suspending(lua_State *_pL); // takes 0 arguments
int lua_xboxone_is_constrained(lua_State *_pL); // takes 0 arguments
int lua_xboxone_suspend(lua_State *_pL); // takes 0 arguments
int lua_xboxone_show_help(lua_State *_pL); // takes 1 arguments
int lua_xboxone_license_trial_version(lua_State *_pL); // takes 0 arguments
int lua_xboxone_license_trial_user(lua_State *_pL); // takes 0 arguments
int lua_xboxone_license_trial_time_remaining(lua_State *_pL); // takes 0 arguments
int lua_xboxone_check_privilege(lua_State *_pL); // takes 3 arguments
int lua_xboxone_fire_event(lua_State *_pL); // takes -1 arguments
int lua_xboxone_get_stats_for_user(lua_State *_pL); // takes -1 arguments
int lua_xboxone_stats_setup(lua_State *_pL); // takes 2 arguments
int lua_xboxone_stats_set_stat_real(lua_State *_pL); // takes 3 arguments
int lua_xboxone_stats_set_stat_int(lua_State *_pL); // takes 3 arguments
int lua_xboxone_stats_set_stat_string(lua_State *_pL); // takes 3 arguments
int lua_xboxone_stats_delete_stat(lua_State *_pL); // takes 2 arguments
int lua_xboxone_stats_get_stat(lua_State *_pL); // takes 2 arguments
int lua_xboxone_stats_get_stat_names(lua_State *_pL); // takes 1 arguments
int lua_xboxone_stats_add_user(lua_State *_pL); // takes 1 arguments
int lua_xboxone_stats_remove_user(lua_State *_pL); // takes 1 arguments
int lua_xboxone_stats_flush_user(lua_State *_pL); // takes 2 arguments
int lua_xboxone_stats_get_leaderboard(lua_State *_pL); // takes 6 arguments
int lua_xboxone_stats_get_social_leaderboard(lua_State *_pL); // takes 7 arguments
int lua_xboxone_achievements_set_progress(lua_State *_pL); // takes 3 arguments
int lua_xboxone_set_rich_presence(lua_State *_pL); // takes 3 arguments
int lua_xboxone_matchmaking_create(lua_State *_pL); // takes 4 arguments
int lua_xboxone_matchmaking_find(lua_State *_pL); // takes 3 arguments
int lua_xboxone_matchmaking_start(lua_State *_pL); // takes 1 arguments
int lua_xboxone_matchmaking_stop(lua_State *_pL); // takes 1 arguments
int lua_xboxone_matchmaking_session_get_users(lua_State *_pL); // takes 1 arguments
int lua_xboxone_matchmaking_session_leave(lua_State *_pL); // takes 1 arguments
int lua_xboxone_matchmaking_send_invites(lua_State *_pL); // takes 3 arguments
int lua_xboxone_matchmaking_set_joinable_session(lua_State *_pL); // takes 2 arguments
int lua_xboxone_matchmaking_join_invite(lua_State *_pL); // takes 4 arguments
int lua_xboxone_matchmaking_join_session(lua_State *_pL); // takes 3 arguments
int lua_xboxone_matchmaking_set_find_timeout(lua_State *_pL); // takes 1 arguments
int lua_xboxone_chat_add_user_to_channel(lua_State *_pL); // takes 2 arguments
int lua_xboxone_chat_remove_user_from_channel(lua_State *_pL); // takes 2 arguments
int lua_xboxone_chat_set_muted(lua_State *_pL); // takes 1 arguments
int lua_xboxone_set_service_configuration_id(lua_State *_pL); // takes 1 arguments
int lua_xboxone_read_player_leaderboard(lua_State *_pL); // takes 4 arguments
int lua_xboxlive_get_user_count(lua_State *_pL); // takes 0 arguments
int lua_xboxlive_get_user(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_get_activating_user(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_user_is_active(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_user_is_guest(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_user_is_signed_in(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_user_is_signing_in(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_user_is_remote(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_gamedisplayname_for_user(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_appdisplayname_for_user(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_gamertag_for_user(lua_State *_pL); // takes -1 arguments
int lua_xboxlive_user_id_for_user(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_agegroup_for_user(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_gamerscore_for_user(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_reputation_for_user(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_user_for_pad(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_pad_count_for_user(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_pad_for_user(lua_State *_pL); // takes 2 arguments
int lua_xboxlive_sponsor_for_user(lua_State *_pL); // takes 2 arguments
int lua_xboxlive_show_account_picker(lua_State *_pL); // takes 2 arguments
int lua_xboxlive_sprite_add_from_gamerpicture(lua_State *_pL); // takes 4 arguments
int lua_xboxlive_show_profile_card_for_user(lua_State *_pL); // takes 2 arguments
int lua_xboxlive_generate_player_session_id(lua_State *_pL); // takes 0 arguments
int lua_xboxlive_read_player_leaderboard(lua_State *_pL); // takes 4 arguments
int lua_xboxlive_set_savedata_user(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_get_savedata_user(lua_State *_pL); // takes 0 arguments
int lua_xboxlive_get_file_error(lua_State *_pL); // takes 0 arguments
int lua_uwp_was_terminated(lua_State *_pL); // takes 0 arguments
int lua_uwp_is_suspending(lua_State *_pL); // takes 0 arguments
int lua_uwp_is_constrained(lua_State *_pL); // takes 0 arguments
int lua_uwp_suspend(lua_State *_pL); // takes 0 arguments
int lua_uwp_show_help(lua_State *_pL); // takes 1 arguments
int lua_uwp_license_trial_version(lua_State *_pL); // takes 0 arguments
int lua_uwp_license_trial_user(lua_State *_pL); // takes 0 arguments
int lua_uwp_license_trial_time_remaining(lua_State *_pL); // takes 0 arguments
int lua_uwp_check_privilege(lua_State *_pL); // takes 3 arguments
int lua_xboxlive_fire_event(lua_State *_pL); // takes -1 arguments
int lua_xboxlive_get_stats_for_user(lua_State *_pL); // takes -1 arguments
int lua_xboxlive_stats_setup(lua_State *_pL); // takes 2 arguments
int lua_xboxlive_stats_set_stat_real(lua_State *_pL); // takes 3 arguments
int lua_xboxlive_stats_set_stat_int(lua_State *_pL); // takes 3 arguments
int lua_xboxlive_stats_set_stat_string(lua_State *_pL); // takes 3 arguments
int lua_xboxlive_stats_delete_stat(lua_State *_pL); // takes 2 arguments
int lua_xboxlive_stats_get_stat(lua_State *_pL); // takes 2 arguments
int lua_xboxlive_stats_get_stat_names(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_stats_add_user(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_stats_remove_user(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_stats_flush_user(lua_State *_pL); // takes 2 arguments
int lua_xboxlive_stats_get_leaderboard(lua_State *_pL); // takes 6 arguments
int lua_xboxlive_stats_get_social_leaderboard(lua_State *_pL); // takes 7 arguments
int lua_xboxlive_achievements_set_progress(lua_State *_pL); // takes 3 arguments
int lua_xboxlive_set_rich_presence(lua_State *_pL); // takes 3 arguments
int lua_xboxlive_matchmaking_create(lua_State *_pL); // takes -1 arguments
int lua_xboxlive_matchmaking_find(lua_State *_pL); // takes -1 arguments
int lua_xboxlive_matchmaking_start(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_matchmaking_stop(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_matchmaking_session_get_users(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_matchmaking_session_leave(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_matchmaking_send_invites(lua_State *_pL); // takes 3 arguments
int lua_xboxlive_matchmaking_set_joinable_session(lua_State *_pL); // takes 2 arguments
int lua_xboxlive_matchmaking_join_invite(lua_State *_pL); // takes 4 arguments
int lua_xboxlive_matchmaking_join_session(lua_State *_pL); // takes 3 arguments
int lua_xboxlive_matchmaking_set_find_timeout(lua_State *_pL); // takes 1 arguments
int lua_xboxlive_chat_add_user_to_channel(lua_State *_pL); // takes 2 arguments
int lua_xboxlive_chat_remove_user_from_channel(lua_State *_pL); // takes 2 arguments
int lua_xboxlive_chat_set_muted(lua_State *_pL); // takes 2 arguments
int lua_xboxlive_set_service_configuration_id(lua_State *_pL); // takes 1 arguments
int lua_psn_get_leaderboard_score_range(lua_State *_pL); // takes 4 arguments
int lua_psn_default_user_name(lua_State *_pL); // takes 0 arguments
int lua_psn_name_for_pad(lua_State *_pL); // takes 1 arguments
int lua_psn_unlock_trophy(lua_State *_pL); // takes 2 arguments
int lua_psn_get_trophy_unlock_state(lua_State *_pL); // takes 1 arguments
int lua_psn_init_np_libs(lua_State *_pL); // takes 3 arguments
int lua_psn_exit_np_libs(lua_State *_pL); // takes 0 arguments
int lua_psn_get_leaderboard_score(lua_State *_pL); // takes 2 arguments
int lua_psn_post_leaderboard_score(lua_State *_pL); // takes 3 arguments
int lua_psn_post_leaderboard_score_comment(lua_State *_pL); // takes 4 arguments
int lua_psn_check_np_availability(lua_State *_pL); // takes 2 arguments
int lua_psn_tick_error_dialog(lua_State *_pL); // takes 0 arguments
int lua_psn_get_friends_scores(lua_State *_pL); // takes 4 arguments
int lua_psn_name_for_user(lua_State *_pL); // takes 1 arguments
int lua_psn_default_user(lua_State *_pL); // takes 0 arguments
int lua_psn_user_for_pad(lua_State *_pL); // takes 1 arguments
int lua_matchmaking_reset_create_params(lua_State *_pL); // takes 0 arguments
int lua_matchmaking_add_create_param(lua_State *_pL); // takes 2 arguments
int lua_matchmaking_session_create(lua_State *_pL); // takes 2 arguments
int lua_matchmaking_session_get_users(lua_State *_pL); // takes 1 arguments
int lua_matchmaking_session_get_owner(lua_State *_pL); // takes 1 arguments
int lua_matchmaking_session_set_closed(lua_State *_pL); // takes 1 arguments
int lua_matchmaking_session_set_open(lua_State *_pL); // takes 1 arguments
int lua_matchmaking_session_set_hidden(lua_State *_pL); // takes 1 arguments
int lua_matchmaking_reset_find_params(lua_State *_pL); // takes 0 arguments
int lua_matchmaking_add_find_param(lua_State *_pL); // takes 3 arguments
int lua_matchmaking_session_find(lua_State *_pL); // takes 0 arguments
int lua_matchmaking_session_join(lua_State *_pL); // takes 1 arguments
int lua_matchmaking_session_leave(lua_State *_pL); // takes 1 arguments
int lua_matchmaking_session_update(lua_State *_pL); // takes 1 arguments
int lua_matchmaking_start(lua_State *_pL); // takes 2 arguments
int lua_matchmaking_stop(lua_State *_pL); // takes 0 arguments
int lua_matchmaking_session_invite_start(lua_State *_pL); // takes 1 arguments
int lua_matchmaking_send_invites_no_ui(lua_State *_pL); // takes 4 arguments
int lua_matchmaking_send_invites(lua_State *_pL); // takes 3 arguments
int lua_matchmaking_tick_invites(lua_State *_pL); // takes 0 arguments
int lua_matchmaking_join_invite(lua_State *_pL); // takes 1 arguments
int lua_psn_np_check_plus(lua_State *_pL); // takes 3 arguments
int lua_psn_np_commerce_dialog_open(lua_State *_pL); // takes 3 arguments
int lua_psn_np_commerce_dialog_tick(lua_State *_pL); // takes 0 arguments
int lua_psn_np_notify_plus_feature(lua_State *_pL); // takes 3 arguments
int lua_psn_set_content_restriction(lua_State *_pL); // takes 1 arguments
int lua_psn_load_modules(lua_State *_pL); // takes 0 arguments
int lua_psn_get_avatar_url(lua_State *_pL); // takes 1 arguments
int lua_psn_get_tus_data(lua_State *_pL); // takes 2 arguments
int lua_psn_set_tus_data(lua_State *_pL); // takes 4 arguments
int lua_psn_get_tus_variable(lua_State *_pL); // takes 2 arguments
int lua_psn_set_tus_variable(lua_State *_pL); // takes 3 arguments
int lua_psn_delete_tus_data(lua_State *_pL); // takes 2 arguments
int lua_psn_content_restriction_add(lua_State *_pL); // takes 2 arguments
int lua_psn_net_check(lua_State *_pL); // takes 1 arguments
int lua_psn_setup_trophies(lua_State *_pL); // takes 0 arguments
int lua_psn_tick(lua_State *_pL); // takes 0 arguments
int lua_psn_init_trophy(lua_State *_pL); // takes 1 arguments
int lua_psn_np_status(lua_State *_pL); // takes 1 arguments
int lua_psn_show_error_dialog(lua_State *_pL); // takes 1 arguments
int lua_psn_check_free_space(lua_State *_pL); // takes 2 arguments
int lua_psn_get_entitlement_list(lua_State *_pL); // takes 0 arguments
int lua_video_open(lua_State *_pL); // takes 1 arguments
int lua_video_close(lua_State *_pL); // takes 0 arguments
int lua_video_draw(lua_State *_pL); // takes 0 arguments
int lua_video_set_volume(lua_State *_pL); // takes 1 arguments
int lua_switch_get_operation_mode(lua_State *_pL); // takes 0 arguments
int lua_switch_get_performance_mode(lua_State *_pL); // takes 0 arguments
int lua_switch_set_performance_config(lua_State *_pL); // takes 2 arguments
int lua_switch_get_performance_config(lua_State *_pL); // takes 1 arguments
int lua_switch_language_get_desired_language(lua_State *_pL); // takes 0 arguments
int lua_switch_set_local_network_mode(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_vibration_permitted(lua_State *_pL); // takes 0 arguments
int lua_switch_controller_show_strap_guide(lua_State *_pL); // takes 0 arguments
int lua_switch_controller_support_show(lua_State *_pL); // takes 0 arguments
int lua_switch_controller_support_set_defaults(lua_State *_pL); // takes 0 arguments
int lua_switch_controller_support_set_all(lua_State *_pL); // takes 8 arguments
int lua_switch_controller_support_set_identification_color(lua_State *_pL); // takes 2 arguments
int lua_switch_controller_support_set_identification_colour(lua_State *_pL); // takes 2 arguments
int lua_switch_controller_support_set_show_explain_text(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_support_set_show_identification_colors(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_support_set_show_identification_colours(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_support_set_left_justify(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_support_set_permit_joycon_dual(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_support_set_singleplayer_only(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_support_set_maintain_connections(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_support_set_player_min(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_support_set_player_max(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_support_set_explain_text(lua_State *_pL); // takes 2 arguments
int lua_switch_controller_support_get_player_count(lua_State *_pL); // takes 0 arguments
int lua_switch_controller_support_get_selected_id(lua_State *_pL); // takes 0 arguments
int lua_switch_controller_joycon_set_holdtype(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_joycon_get_holdtype(lua_State *_pL); // takes 0 arguments
int lua_switch_controller_joycon_left_connected(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_joycon_right_connected(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_set_supported_styles(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_get_supported_styles(lua_State *_pL); // takes 0 arguments
int lua_switch_controller_set_handheld_activation_mode(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_get_handheld_activation_mode(lua_State *_pL); // takes 0 arguments
int lua_switch_controller_vibrate_hd(lua_State *_pL); // takes 6 arguments
int lua_switch_controller_acceleration(lua_State *_pL); // takes -1 arguments
int lua_switch_controller_angular_velocity(lua_State *_pL); // takes -1 arguments
int lua_switch_controller_direction(lua_State *_pL); // takes -1 arguments
int lua_switch_controller_angle(lua_State *_pL); // takes -1 arguments
int lua_switch_controller_is_at_rest(lua_State *_pL); // takes -1 arguments
int lua_switch_controller_get_sixaxis_handle_count(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_set_gyro_zero_drift_mode(lua_State *_pL); // takes 2 arguments
int lua_switch_controller_get_gyro_zero_drift_mode(lua_State *_pL); // takes 3 arguments
int lua_switch_controller_is_sensor_fusion_enabled(lua_State *_pL); // takes 2 arguments
int lua_switch_controller_enable_sensor_fusion(lua_State *_pL); // takes 3 arguments
int lua_switch_controller_set_sensor_fusion_params(lua_State *_pL); // takes 4 arguments
int lua_switch_controller_get_sensor_fusion_params(lua_State *_pL); // takes 2 arguments
int lua_switch_controller_reset_sensor_fusion_params(lua_State *_pL); // takes 2 arguments
int lua_switch_screenshot_disable(lua_State *_pL); // takes 0 arguments
int lua_switch_screenshot_enable(lua_State *_pL); // takes 0 arguments
int lua_switch_screenshot_set_orientation(lua_State *_pL); // takes 1 arguments
int lua_switch_recording_enable(lua_State *_pL); // takes 0 arguments
int lua_switch_recording_disable(lua_State *_pL); // takes 0 arguments
int lua_switch_save_data_mount(lua_State *_pL); // takes 1 arguments
int lua_switch_save_data_commit(lua_State *_pL); // takes 0 arguments
int lua_switch_save_data_unmount(lua_State *_pL); // takes 0 arguments
int lua_switch_theme_set(lua_State *_pL); // takes 1 arguments
int lua_switch_add_ssl_certificate(lua_State *_pL); // takes 2 arguments
int lua_switch_accounts_get_accounts(lua_State *_pL); // takes 0 arguments
int lua_switch_accounts_get_nickname(lua_State *_pL); // takes 1 arguments
int lua_switch_accounts_open_preselected_user(lua_State *_pL); // takes 0 arguments
int lua_switch_accounts_open_user(lua_State *_pL); // takes 1 arguments
int lua_switch_accounts_close_user(lua_State *_pL); // takes 1 arguments
int lua_switch_accounts_login_user(lua_State *_pL); // takes 1 arguments
int lua_switch_accounts_is_user_open(lua_State *_pL); // takes 1 arguments
int lua_switch_accounts_is_user_online(lua_State *_pL); // takes 1 arguments
int lua_switch_accounts_select_account(lua_State *_pL); // takes 3 arguments
int lua_switch_accounts_get_online_token(lua_State *_pL); // takes 1 arguments
int lua_switch_irsensor_get_mode(lua_State *_pL); // takes 1 arguments
int lua_switch_irsensor_set_mode(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_common_config_set_all(lua_State *_pL); // takes 5 arguments
int lua_switch_irsensor_common_config_set_exposure_time(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_common_config_set_light_target(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_common_config_set_gain(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_common_config_is_negative_image_used(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_cluster_config_set_defaults(lua_State *_pL); // takes 1 arguments
int lua_switch_irsensor_cluster_config_set_window_of_interest(lua_State *_pL); // takes 5 arguments
int lua_switch_irsensor_cluster_config_set_object_pixel_count_min(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_cluster_config_set_object_pixel_count_max(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_cluster_config_set_object_intensity_min(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_cluster_config_set_external_light_filtering(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_cluster_create_state_buffer(lua_State *_pL); // takes 1 arguments
int lua_switch_irsensor_moment_config_set_defaults(lua_State *_pL); // takes 1 arguments
int lua_switch_irsensor_moment_config_set_window_of_interest(lua_State *_pL); // takes 5 arguments
int lua_switch_irsensor_moment_config_set_preprocess(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_moment_config_set_preprocess_intensity_threshold(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_moment_create_state_buffer(lua_State *_pL); // takes 1 arguments
int lua_switch_irsensor_image_config_set_defaults(lua_State *_pL); // takes 1 arguments
int lua_switch_irsensor_image_config_set_format(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_image_config_set_orig_format(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_image_config_set_trimming_format(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_image_config_set_trimming_start(lua_State *_pL); // takes 3 arguments
int lua_switch_irsensor_image_config_set_external_light_filtering(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_image_create_state_buffers(lua_State *_pL); // takes 1 arguments
int lua_switch_irsensor_hand_config_set_mode(lua_State *_pL); // takes 2 arguments
int lua_switch_irsensor_hand_create_state_buffers(lua_State *_pL); // takes 1 arguments
int lua_switch_bnvib_load(lua_State *_pL); // takes 1 arguments
int lua_switch_bnvib_unload(lua_State *_pL); // takes 1 arguments
int lua_switch_bnvib_get_value(lua_State *_pL); // takes 2 arguments
int lua_switch_bnvib_is_looping(lua_State *_pL); // takes 1 arguments
int lua_switch_bnvib_get_loop_end_position(lua_State *_pL); // takes 1 arguments
int lua_switch_bnvib_get_loop_interval(lua_State *_pL); // takes 1 arguments
int lua_switch_bnvib_get_loop_start_position(lua_State *_pL); // takes 1 arguments
int lua_switch_bnvib_get_length(lua_State *_pL); // takes 1 arguments
int lua_switch_bnvib_get_sampling_rate(lua_State *_pL); // takes 1 arguments
int lua_switch_matchmaking_start(lua_State *_pL); // takes 1 arguments
int lua_switch_matchmaking_stop(lua_State *_pL); // takes 1 arguments
int lua_switch_matchmaking_session_create(lua_State *_pL); // takes 6 arguments
int lua_switch_matchmaking_session_leave(lua_State *_pL); // takes 2 arguments
int lua_switch_matchmaking_session_find(lua_State *_pL); // takes 3 arguments
int lua_switch_matchmaking_session_join(lua_State *_pL); // takes 2 arguments
int lua_switch_matchmaking_session_autojoin(lua_State *_pL); // takes 3 arguments
int lua_switch_gameserver_login_user(lua_State *_pL); // takes 3 arguments
int lua_switch_gameserver_logout_user(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_get_default_joycon_assignment(lua_State *_pL); // takes 0 arguments
int lua_switch_controller_set_default_joycon_assignment(lua_State *_pL); // takes 1 arguments
int lua_switch_controller_start_lr_assignment(lua_State *_pL); // takes 0 arguments
int lua_switch_controller_stop_lr_assignment(lua_State *_pL); // takes 0 arguments
int lua_switch_leaderboard_get_scores(lua_State *_pL); // takes -1 arguments
int lua_switch_leaderboard_post_score(lua_State *_pL); // takes 3 arguments
int lua_switch_leaderboard_post_common_data(lua_State *_pL); // takes -1 arguments
int lua_switch_error_show_os_code(lua_State *_pL); // takes 1 arguments
int lua_switch_show_store(lua_State *_pL); // takes 1 arguments
int lua_switch_error_get_os_code_info(lua_State *_pL); // takes 1 arguments
int lua_switch_error_begin(lua_State *_pL); // takes 0 arguments
int lua_switch_error_end(lua_State *_pL); // takes 0 arguments
int lua_switch_error_set_application_code(lua_State *_pL); // takes 1 arguments
int lua_switch_error_set_dialog_message(lua_State *_pL); // takes 1 arguments
int lua_switch_error_set_fullscreen_message(lua_State *_pL); // takes 1 arguments
int lua_switch_error_set_language_code(lua_State *_pL); // takes 1 arguments
int lua_ERROR(lua_State *_pL); // takes 1 arguments
int lua_testFailed(lua_State *_pL); // takes 1 arguments
int lua_win8_livetile_tile_notification(lua_State *_pL); // takes 4 arguments
int lua_win8_livetile_tile_clear(lua_State *_pL); // takes 0 arguments
int lua_win8_livetile_badge_notification(lua_State *_pL); // takes 1 arguments
int lua_win8_livetile_badge_clear(lua_State *_pL); // takes 0 arguments
int lua_win8_livetile_queue_enable(lua_State *_pL); // takes 1 arguments
int lua_win8_appbar_enable(lua_State *_pL); // takes 1 arguments
int lua_win8_appbar_add_element(lua_State *_pL); // takes 6 arguments
int lua_win8_appbar_remove_element(lua_State *_pL); // takes 1 arguments
int lua_win8_share_image(lua_State *_pL); // takes 3 arguments
int lua_win8_share_screenshot(lua_State *_pL); // takes 2 arguments
int lua_win8_share_file(lua_State *_pL); // takes 3 arguments
int lua_win8_share_url(lua_State *_pL); // takes 3 arguments
int lua_win8_share_text(lua_State *_pL); // takes 3 arguments
int lua_win8_settingscharm_add_entry(lua_State *_pL); // takes 2 arguments
int lua_win8_settingscharm_add_html_entry(lua_State *_pL); // takes 3 arguments
int lua_win8_settingscharm_add_xaml_entry(lua_State *_pL); // takes 4 arguments
int lua_win8_settingscharm_set_xaml_property(lua_State *_pL); // takes 4 arguments
int lua_win8_settingscharm_get_xaml_property(lua_State *_pL); // takes 3 arguments
int lua_win8_settingscharm_remove_entry(lua_State *_pL); // takes 1 arguments
int lua_win8_search_enable(lua_State *_pL); // takes 1 arguments
int lua_win8_search_disable(lua_State *_pL); // takes 0 arguments
int lua_win8_search_add_suggestions(lua_State *_pL); // takes 1 arguments
int lua_win8_device_touchscreen_available(lua_State *_pL); // takes 0 arguments
int lua_win8_secondarytile_pin(lua_State *_pL); // takes 8 arguments
int lua_win8_secondarytile_delete(lua_State *_pL); // takes 1 arguments
int lua_win8_secondarytile_badge_notification(lua_State *_pL); // takes 2 arguments
int lua_win8_license_initialize_sandbox(lua_State *_pL); // takes 1 arguments
int lua_win8_license_trial_version(lua_State *_pL); // takes 0 arguments
int lua_win8_livetile_notification_begin(lua_State *_pL); // takes 1 arguments
int lua_win8_livetile_notification_secondary_begin(lua_State *_pL); // takes 2 arguments
int lua_win8_livetile_notification_expiry(lua_State *_pL); // takes 1 arguments
int lua_win8_livetile_notification_tag(lua_State *_pL); // takes 1 arguments
int lua_win8_livetile_notification_text_add(lua_State *_pL); // takes 1 arguments
int lua_win8_livetile_notification_image_add(lua_State *_pL); // takes 1 arguments
int lua_win8_livetile_notification_end(lua_State *_pL); // takes 0 arguments
int lua_uwp_livetile_tile_clear(lua_State *_pL); // takes 0 arguments
int lua_uwp_livetile_badge_notification(lua_State *_pL); // takes 1 arguments
int lua_uwp_livetile_badge_clear(lua_State *_pL); // takes 0 arguments
int lua_uwp_livetile_queue_enable(lua_State *_pL); // takes 1 arguments
int lua_uwp_secondarytile_pin(lua_State *_pL); // takes 8 arguments
int lua_uwp_secondarytile_delete(lua_State *_pL); // takes 1 arguments
int lua_uwp_secondarytile_badge_notification(lua_State *_pL); // takes 2 arguments
int lua_uwp_secondarytile_tile_clear(lua_State *_pL); // takes 1 arguments
int lua_uwp_secondarytile_badge_clear(lua_State *_pL); // takes 1 arguments
int lua_uwp_livetile_notification_begin(lua_State *_pL); // takes 1 arguments
int lua_uwp_livetile_notification_secondary_begin(lua_State *_pL); // takes 2 arguments
int lua_uwp_livetile_notification_expiry(lua_State *_pL); // takes 1 arguments
int lua_uwp_livetile_notification_tag(lua_State *_pL); // takes 1 arguments
int lua_uwp_livetile_notification_text_add(lua_State *_pL); // takes 1 arguments
int lua_uwp_livetile_notification_image_add(lua_State *_pL); // takes 1 arguments
int lua_uwp_livetile_notification_end(lua_State *_pL); // takes 0 arguments
int lua_uwp_livetile_notification_template_add(lua_State *_pL); // takes 1 arguments
int lua_uwp_appbar_enable(lua_State *_pL); // takes 1 arguments
int lua_uwp_appbar_add_element(lua_State *_pL); // takes 7 arguments
int lua_uwp_appbar_remove_element(lua_State *_pL); // takes 1 arguments
int lua_uwp_device_touchscreen_available(lua_State *_pL); // takes 0 arguments
int lua_layer_get_id(lua_State *_pL); // takes 1 arguments
int lua_layer_get_id_at_depth(lua_State *_pL); // takes 1 arguments
int lua_layer_get_depth(lua_State *_pL); // takes 1 arguments
int lua_layer_create(lua_State *_pL); // takes 2 arguments
int lua_layer_destroy(lua_State *_pL); // takes 1 arguments
int lua_layer_destroy_instances(lua_State *_pL); // takes 1 arguments
int lua_layer_add_instance(lua_State *_pL); // takes 2 arguments
int lua_layer_has_instance(lua_State *_pL); // takes 2 arguments
int lua_layer_set_visible(lua_State *_pL); // takes 2 arguments
int lua_layer_get_visible(lua_State *_pL); // takes 1 arguments
int lua_layer_exists(lua_State *_pL); // takes 1 arguments
int lua_layer_x(lua_State *_pL); // takes 2 arguments
int lua_layer_y(lua_State *_pL); // takes 2 arguments
int lua_layer_get_x(lua_State *_pL); // takes 1 arguments
int lua_layer_get_y(lua_State *_pL); // takes 1 arguments
int lua_layer_hspeed(lua_State *_pL); // takes 2 arguments
int lua_layer_vspeed(lua_State *_pL); // takes 2 arguments
int lua_layer_get_hspeed(lua_State *_pL); // takes 1 arguments
int lua_layer_get_vspeed(lua_State *_pL); // takes 1 arguments
int lua_layer_script_begin(lua_State *_pL); // takes 2 arguments
int lua_layer_script_end(lua_State *_pL); // takes 2 arguments
int lua_layer_shader(lua_State *_pL); // takes 2 arguments
int lua_layer_get_script_begin(lua_State *_pL); // takes 1 arguments
int lua_layer_get_script_end(lua_State *_pL); // takes 1 arguments
int lua_layer_get_shader(lua_State *_pL); // takes 1 arguments
int lua_layer_set_target_room(lua_State *_pL); // takes 1 arguments
int lua_layer_get_target_room(lua_State *_pL); // takes 0 arguments
int lua_layer_reset_target_room(lua_State *_pL); // takes 0 arguments
int lua_layer_get_all(lua_State *_pL); // takes 0 arguments
int lua_layer_get_all_elements(lua_State *_pL); // takes 1 arguments
int lua_layer_get_name(lua_State *_pL); // takes 1 arguments
int lua_layer_depth(lua_State *_pL); // takes 2 arguments
int lua_layer_get_element_layer(lua_State *_pL); // takes 1 arguments
int lua_layer_get_element_type(lua_State *_pL); // takes 1 arguments
int lua_layer_element_move(lua_State *_pL); // takes 2 arguments
int lua_layer_force_draw_depth(lua_State *_pL); // takes 2 arguments
int lua_layer_is_draw_depth_forced(lua_State *_pL); // takes 0 arguments
int lua_layer_get_forced_depth(lua_State *_pL); // takes 0 arguments
int lua_layer_background_get_id(lua_State *_pL); // takes 1 arguments
int lua_layer_background_exists(lua_State *_pL); // takes 2 arguments
int lua_layer_background_create(lua_State *_pL); // takes 2 arguments
int lua_layer_background_destroy(lua_State *_pL); // takes 1 arguments
int lua_layer_background_visible(lua_State *_pL); // takes 2 arguments
int lua_layer_background_htiled(lua_State *_pL); // takes 2 arguments
int lua_layer_background_vtiled(lua_State *_pL); // takes 2 arguments
int lua_layer_background_xscale(lua_State *_pL); // takes 2 arguments
int lua_layer_background_yscale(lua_State *_pL); // takes 2 arguments
int lua_layer_background_stretch(lua_State *_pL); // takes 2 arguments
int lua_layer_background_blend(lua_State *_pL); // takes 2 arguments
int lua_layer_background_alpha(lua_State *_pL); // takes 2 arguments
int lua_layer_background_index(lua_State *_pL); // takes 2 arguments
int lua_layer_background_speed(lua_State *_pL); // takes 2 arguments
int lua_layer_background_sprite(lua_State *_pL); // takes 2 arguments
int lua_layer_background_change(lua_State *_pL); // takes 2 arguments
int lua_layer_background_get_visible(lua_State *_pL); // takes 1 arguments
int lua_layer_background_get_sprite(lua_State *_pL); // takes 1 arguments
int lua_layer_background_get_htiled(lua_State *_pL); // takes 1 arguments
int lua_layer_background_get_vtiled(lua_State *_pL); // takes 1 arguments
int lua_layer_background_get_xscale(lua_State *_pL); // takes 1 arguments
int lua_layer_background_get_yscale(lua_State *_pL); // takes 1 arguments
int lua_layer_background_get_stretch(lua_State *_pL); // takes 1 arguments
int lua_layer_background_get_blend(lua_State *_pL); // takes 1 arguments
int lua_layer_background_get_alpha(lua_State *_pL); // takes 1 arguments
int lua_layer_background_get_index(lua_State *_pL); // takes 1 arguments
int lua_layer_background_get_speed(lua_State *_pL); // takes 1 arguments
int lua_layer_sprite_get_id(lua_State *_pL); // takes 2 arguments
int lua_layer_sprite_exists(lua_State *_pL); // takes 2 arguments
int lua_layer_sprite_create(lua_State *_pL); // takes 4 arguments
int lua_layer_sprite_destroy(lua_State *_pL); // takes 1 arguments
int lua_layer_sprite_change(lua_State *_pL); // takes 2 arguments
int lua_layer_sprite_index(lua_State *_pL); // takes 2 arguments
int lua_layer_sprite_speed(lua_State *_pL); // takes 2 arguments
int lua_layer_sprite_xscale(lua_State *_pL); // takes 2 arguments
int lua_layer_sprite_yscale(lua_State *_pL); // takes 2 arguments
int lua_layer_sprite_angle(lua_State *_pL); // takes 2 arguments
int lua_layer_sprite_blend(lua_State *_pL); // takes 2 arguments
int lua_layer_sprite_alpha(lua_State *_pL); // takes 2 arguments
int lua_layer_sprite_x(lua_State *_pL); // takes 2 arguments
int lua_layer_sprite_y(lua_State *_pL); // takes 2 arguments
int lua_layer_sprite_get_sprite(lua_State *_pL); // takes 1 arguments
int lua_layer_sprite_get_index(lua_State *_pL); // takes 1 arguments
int lua_layer_sprite_get_speed(lua_State *_pL); // takes 1 arguments
int lua_layer_sprite_get_xscale(lua_State *_pL); // takes 1 arguments
int lua_layer_sprite_get_yscale(lua_State *_pL); // takes 1 arguments
int lua_layer_sprite_get_angle(lua_State *_pL); // takes 1 arguments
int lua_layer_sprite_get_blend(lua_State *_pL); // takes 1 arguments
int lua_layer_sprite_get_alpha(lua_State *_pL); // takes 1 arguments
int lua_layer_sprite_get_x(lua_State *_pL); // takes 1 arguments
int lua_layer_sprite_get_y(lua_State *_pL); // takes 1 arguments
int lua_instance_activate_layer(lua_State *_pL); // takes 1 arguments
int lua_instance_deactivate_layer(lua_State *_pL); // takes 1 arguments
int lua_layer_tilemap_get_id(lua_State *_pL); // takes 1 arguments
int lua_layer_tilemap_exists(lua_State *_pL); // takes 2 arguments
int lua_layer_tilemap_create(lua_State *_pL); // takes 6 arguments
int lua_layer_tilemap_destroy(lua_State *_pL); // takes 1 arguments
int lua_tilemap_tileset(lua_State *_pL); // takes 2 arguments
int lua_tilemap_x(lua_State *_pL); // takes 2 arguments
int lua_tilemap_y(lua_State *_pL); // takes 2 arguments
int lua_tilemap_set(lua_State *_pL); // takes 4 arguments
int lua_tilemap_set_at_pixel(lua_State *_pL); // takes 4 arguments
int lua_tilemap_get_tileset(lua_State *_pL); // takes 1 arguments
int lua_tilemap_get_tile_width(lua_State *_pL); // takes 1 arguments
int lua_tilemap_get_tile_height(lua_State *_pL); // takes 1 arguments
int lua_tilemap_get_width(lua_State *_pL); // takes 1 arguments
int lua_tilemap_get_height(lua_State *_pL); // takes 1 arguments
int lua_tilemap_set_width(lua_State *_pL); // takes 1 arguments
int lua_tilemap_set_height(lua_State *_pL); // takes 1 arguments
int lua_tilemap_get_x(lua_State *_pL); // takes 1 arguments
int lua_tilemap_get_y(lua_State *_pL); // takes 1 arguments
int lua_tilemap_get(lua_State *_pL); // takes 3 arguments
int lua_tilemap_get_at_pixel(lua_State *_pL); // takes 3 arguments
int lua_tilemap_get_cell_x_at_pixel(lua_State *_pL); // takes 3 arguments
int lua_tilemap_get_cell_y_at_pixel(lua_State *_pL); // takes 3 arguments
int lua_tilemap_clear(lua_State *_pL); // takes 2 arguments
int lua_draw_tilemap(lua_State *_pL); // takes 3 arguments
int lua_draw_tile(lua_State *_pL); // takes 5 arguments
int lua_tilemap_set_global_mask(lua_State *_pL); // takes 1 arguments
int lua_tilemap_get_global_mask(lua_State *_pL); // takes 0 arguments
int lua_tilemap_set_mask(lua_State *_pL); // takes 2 arguments
int lua_tilemap_get_mask(lua_State *_pL); // takes 1 arguments
int lua_tilemap_get_frame(lua_State *_pL); // takes 1 arguments
int lua_tile_set_empty(lua_State *_pL); // takes 1 arguments
int lua_tile_set_index(lua_State *_pL); // takes 2 arguments
int lua_tile_set_flip(lua_State *_pL); // takes 2 arguments
int lua_tile_set_mirror(lua_State *_pL); // takes 2 arguments
int lua_tile_set_rotate(lua_State *_pL); // takes 2 arguments
int lua_tile_get_empty(lua_State *_pL); // takes 1 arguments
int lua_tile_get_index(lua_State *_pL); // takes 1 arguments
int lua_tile_get_flip(lua_State *_pL); // takes 1 arguments
int lua_tile_get_mirror(lua_State *_pL); // takes 1 arguments
int lua_tile_get_rotate(lua_State *_pL); // takes 1 arguments
int lua_layer_tile_exists(lua_State *_pL); // takes 2 arguments
int lua_layer_tile_create(lua_State *_pL); // takes 8 arguments
int lua_layer_tile_destroy(lua_State *_pL); // takes 1 arguments
int lua_layer_tile_change(lua_State *_pL); // takes 2 arguments
int lua_layer_tile_xscale(lua_State *_pL); // takes 2 arguments
int lua_layer_tile_yscale(lua_State *_pL); // takes 2 arguments
int lua_layer_tile_blend(lua_State *_pL); // takes 2 arguments
int lua_layer_tile_alpha(lua_State *_pL); // takes 2 arguments
int lua_layer_tile_x(lua_State *_pL); // takes 2 arguments
int lua_layer_tile_y(lua_State *_pL); // takes 2 arguments
int lua_layer_tile_region(lua_State *_pL); // takes 5 arguments
int lua_layer_tile_visible(lua_State *_pL); // takes 2 arguments
int lua_layer_tile_get_sprite(lua_State *_pL); // takes 1 arguments
int lua_layer_tile_get_xscale(lua_State *_pL); // takes 1 arguments
int lua_layer_tile_get_yscale(lua_State *_pL); // takes 1 arguments
int lua_layer_tile_get_blend(lua_State *_pL); // takes 1 arguments
int lua_layer_tile_get_alpha(lua_State *_pL); // takes 1 arguments
int lua_layer_tile_get_x(lua_State *_pL); // takes 1 arguments
int lua_layer_tile_get_y(lua_State *_pL); // takes 1 arguments
int lua_layer_tile_get_region(lua_State *_pL); // takes 1 arguments
int lua_layer_tile_get_visible(lua_State *_pL); // takes 1 arguments
int lua_layer_instance_get_instance(lua_State *_pL); // takes 1 arguments